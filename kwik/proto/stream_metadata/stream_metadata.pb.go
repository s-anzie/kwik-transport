// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto/stream_metadata/stream_metadata.proto

package stream_metadata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Metadata frame types - all possible metadata operations
type MetadataFrameType int32

const (
	MetadataFrameType_SECONDARY_STREAM_OPEN   MetadataFrameType = 0 // Secondary stream opening notification
	MetadataFrameType_SECONDARY_STREAM_DATA   MetadataFrameType = 1 // Secondary stream data with metadata
	MetadataFrameType_SECONDARY_STREAM_CLOSE  MetadataFrameType = 2 // Secondary stream closing notification
	MetadataFrameType_OFFSET_SYNC_REQUEST     MetadataFrameType = 3 // Request for offset synchronization
	MetadataFrameType_OFFSET_SYNC_RESPONSE    MetadataFrameType = 4 // Response to offset synchronization
	MetadataFrameType_STREAM_MAPPING_UPDATE   MetadataFrameType = 5 // Stream mapping update notification
	MetadataFrameType_STREAM_MAPPING_QUERY    MetadataFrameType = 6 // Query for stream mapping information
	MetadataFrameType_STREAM_MAPPING_RESPONSE MetadataFrameType = 7 // Response to mapping query
	MetadataFrameType_AGGREGATION_STATUS      MetadataFrameType = 8 // Aggregation status update
	MetadataFrameType_ERROR_NOTIFICATION      MetadataFrameType = 9 // Error notification
)

// Enum value maps for MetadataFrameType.
var (
	MetadataFrameType_name = map[int32]string{
		0: "SECONDARY_STREAM_OPEN",
		1: "SECONDARY_STREAM_DATA",
		2: "SECONDARY_STREAM_CLOSE",
		3: "OFFSET_SYNC_REQUEST",
		4: "OFFSET_SYNC_RESPONSE",
		5: "STREAM_MAPPING_UPDATE",
		6: "STREAM_MAPPING_QUERY",
		7: "STREAM_MAPPING_RESPONSE",
		8: "AGGREGATION_STATUS",
		9: "ERROR_NOTIFICATION",
	}
	MetadataFrameType_value = map[string]int32{
		"SECONDARY_STREAM_OPEN":   0,
		"SECONDARY_STREAM_DATA":   1,
		"SECONDARY_STREAM_CLOSE":  2,
		"OFFSET_SYNC_REQUEST":     3,
		"OFFSET_SYNC_RESPONSE":    4,
		"STREAM_MAPPING_UPDATE":   5,
		"STREAM_MAPPING_QUERY":    6,
		"STREAM_MAPPING_RESPONSE": 7,
		"AGGREGATION_STATUS":      8,
		"ERROR_NOTIFICATION":      9,
	}
)

func (x MetadataFrameType) Enum() *MetadataFrameType {
	p := new(MetadataFrameType)
	*p = x
	return p
}

func (x MetadataFrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataFrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[0].Descriptor()
}

func (MetadataFrameType) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[0]
}

func (x MetadataFrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataFrameType.Descriptor instead.
func (MetadataFrameType) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{0}
}

// Mapping operations - types of mapping changes
type MappingOperation int32

const (
	MappingOperation_MAPPING_CREATE  MappingOperation = 0 // Create a new mapping
	MappingOperation_MAPPING_UPDATE  MappingOperation = 1 // Update an existing mapping
	MappingOperation_MAPPING_DELETE  MappingOperation = 2 // Delete a mapping
	MappingOperation_MAPPING_SUSPEND MappingOperation = 3 // Temporarily suspend a mapping
	MappingOperation_MAPPING_RESUME  MappingOperation = 4 // Resume a suspended mapping
)

// Enum value maps for MappingOperation.
var (
	MappingOperation_name = map[int32]string{
		0: "MAPPING_CREATE",
		1: "MAPPING_UPDATE",
		2: "MAPPING_DELETE",
		3: "MAPPING_SUSPEND",
		4: "MAPPING_RESUME",
	}
	MappingOperation_value = map[string]int32{
		"MAPPING_CREATE":  0,
		"MAPPING_UPDATE":  1,
		"MAPPING_DELETE":  2,
		"MAPPING_SUSPEND": 3,
		"MAPPING_RESUME":  4,
	}
)

func (x MappingOperation) Enum() *MappingOperation {
	p := new(MappingOperation)
	*p = x
	return p
}

func (x MappingOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MappingOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[1].Descriptor()
}

func (MappingOperation) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[1]
}

func (x MappingOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MappingOperation.Descriptor instead.
func (MappingOperation) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{1}
}

// Query types for mapping queries
type QueryType int32

const (
	QueryType_QUERY_BY_SECONDARY_STREAM QueryType = 0 // Query by secondary stream ID
	QueryType_QUERY_BY_KWIK_STREAM      QueryType = 1 // Query by KWIK stream ID
	QueryType_QUERY_BY_PATH             QueryType = 2 // Query all mappings for a path
	QueryType_QUERY_ALL_ACTIVE          QueryType = 3 // Query all active mappings
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "QUERY_BY_SECONDARY_STREAM",
		1: "QUERY_BY_KWIK_STREAM",
		2: "QUERY_BY_PATH",
		3: "QUERY_ALL_ACTIVE",
	}
	QueryType_value = map[string]int32{
		"QUERY_BY_SECONDARY_STREAM": 0,
		"QUERY_BY_KWIK_STREAM":      1,
		"QUERY_BY_PATH":             2,
		"QUERY_ALL_ACTIVE":          3,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[2].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[2]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{2}
}

// Mapping states
type MappingState int32

const (
	MappingState_MAPPING_ACTIVE    MappingState = 0 // Mapping is active and processing data
	MappingState_MAPPING_SUSPENDED MappingState = 1 // Mapping is temporarily suspended
	MappingState_MAPPING_CLOSING   MappingState = 2 // Mapping is being closed
	MappingState_MAPPING_CLOSED    MappingState = 3 // Mapping is closed
	MappingState_MAPPING_ERROR     MappingState = 4 // Mapping is in error state
)

// Enum value maps for MappingState.
var (
	MappingState_name = map[int32]string{
		0: "MAPPING_ACTIVE",
		1: "MAPPING_SUSPENDED",
		2: "MAPPING_CLOSING",
		3: "MAPPING_CLOSED",
		4: "MAPPING_ERROR",
	}
	MappingState_value = map[string]int32{
		"MAPPING_ACTIVE":    0,
		"MAPPING_SUSPENDED": 1,
		"MAPPING_CLOSING":   2,
		"MAPPING_CLOSED":    3,
		"MAPPING_ERROR":     4,
	}
)

func (x MappingState) Enum() *MappingState {
	p := new(MappingState)
	*p = x
	return p
}

func (x MappingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MappingState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[3].Descriptor()
}

func (MappingState) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[3]
}

func (x MappingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MappingState.Descriptor instead.
func (MappingState) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{3}
}

// Aggregation states
type AggregationState int32

const (
	AggregationState_AGGREGATION_IDLE     AggregationState = 0 // No active aggregation
	AggregationState_AGGREGATION_ACTIVE   AggregationState = 1 // Actively aggregating data
	AggregationState_AGGREGATION_WAITING  AggregationState = 2 // Waiting for data from sources
	AggregationState_AGGREGATION_ERROR    AggregationState = 3 // Error in aggregation process
	AggregationState_AGGREGATION_COMPLETE AggregationState = 4 // Aggregation completed
)

// Enum value maps for AggregationState.
var (
	AggregationState_name = map[int32]string{
		0: "AGGREGATION_IDLE",
		1: "AGGREGATION_ACTIVE",
		2: "AGGREGATION_WAITING",
		3: "AGGREGATION_ERROR",
		4: "AGGREGATION_COMPLETE",
	}
	AggregationState_value = map[string]int32{
		"AGGREGATION_IDLE":     0,
		"AGGREGATION_ACTIVE":   1,
		"AGGREGATION_WAITING":  2,
		"AGGREGATION_ERROR":    3,
		"AGGREGATION_COMPLETE": 4,
	}
)

func (x AggregationState) Enum() *AggregationState {
	p := new(AggregationState)
	*p = x
	return p
}

func (x AggregationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[4].Descriptor()
}

func (AggregationState) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[4]
}

func (x AggregationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationState.Descriptor instead.
func (AggregationState) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{4}
}

// Source states
type SourceState int32

const (
	SourceState_SOURCE_ACTIVE  SourceState = 0 // Source is actively sending data
	SourceState_SOURCE_IDLE    SourceState = 1 // Source is idle but available
	SourceState_SOURCE_STALLED SourceState = 2 // Source is stalled/blocked
	SourceState_SOURCE_ERROR   SourceState = 3 // Source is in error state
	SourceState_SOURCE_CLOSED  SourceState = 4 // Source is closed
)

// Enum value maps for SourceState.
var (
	SourceState_name = map[int32]string{
		0: "SOURCE_ACTIVE",
		1: "SOURCE_IDLE",
		2: "SOURCE_STALLED",
		3: "SOURCE_ERROR",
		4: "SOURCE_CLOSED",
	}
	SourceState_value = map[string]int32{
		"SOURCE_ACTIVE":  0,
		"SOURCE_IDLE":    1,
		"SOURCE_STALLED": 2,
		"SOURCE_ERROR":   3,
		"SOURCE_CLOSED":  4,
	}
)

func (x SourceState) Enum() *SourceState {
	p := new(SourceState)
	*p = x
	return p
}

func (x SourceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[5].Descriptor()
}

func (SourceState) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[5]
}

func (x SourceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceState.Descriptor instead.
func (SourceState) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{5}
}

// Error severity levels
type ErrorSeverity int32

const (
	ErrorSeverity_SEVERITY_INFO     ErrorSeverity = 0
	ErrorSeverity_SEVERITY_WARNING  ErrorSeverity = 1
	ErrorSeverity_SEVERITY_ERROR    ErrorSeverity = 2
	ErrorSeverity_SEVERITY_CRITICAL ErrorSeverity = 3
	ErrorSeverity_SEVERITY_FATAL    ErrorSeverity = 4
)

// Enum value maps for ErrorSeverity.
var (
	ErrorSeverity_name = map[int32]string{
		0: "SEVERITY_INFO",
		1: "SEVERITY_WARNING",
		2: "SEVERITY_ERROR",
		3: "SEVERITY_CRITICAL",
		4: "SEVERITY_FATAL",
	}
	ErrorSeverity_value = map[string]int32{
		"SEVERITY_INFO":     0,
		"SEVERITY_WARNING":  1,
		"SEVERITY_ERROR":    2,
		"SEVERITY_CRITICAL": 3,
		"SEVERITY_FATAL":    4,
	}
)

func (x ErrorSeverity) Enum() *ErrorSeverity {
	p := new(ErrorSeverity)
	*p = x
	return p
}

func (x ErrorSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[6].Descriptor()
}

func (ErrorSeverity) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[6]
}

func (x ErrorSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorSeverity.Descriptor instead.
func (ErrorSeverity) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{6}
}

// Compression types for metadata payloads
type CompressionType int32

const (
	CompressionType_COMPRESSION_NONE CompressionType = 0
	CompressionType_COMPRESSION_GZIP CompressionType = 1
	CompressionType_COMPRESSION_LZ4  CompressionType = 2
	CompressionType_COMPRESSION_ZSTD CompressionType = 3
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "COMPRESSION_NONE",
		1: "COMPRESSION_GZIP",
		2: "COMPRESSION_LZ4",
		3: "COMPRESSION_ZSTD",
	}
	CompressionType_value = map[string]int32{
		"COMPRESSION_NONE": 0,
		"COMPRESSION_GZIP": 1,
		"COMPRESSION_LZ4":  2,
		"COMPRESSION_ZSTD": 3,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stream_metadata_stream_metadata_proto_enumTypes[7].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_proto_stream_metadata_stream_metadata_proto_enumTypes[7]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{7}
}

// Stream metadata frame - wrapper for all metadata communication
type StreamMetadataFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FrameId       uint64                 `protobuf:"varint,1,opt,name=frame_id,json=frameId,proto3" json:"frame_id,omitempty"`                   // Unique frame identifier
	Type          MetadataFrameType      `protobuf:"varint,2,opt,name=type,proto3,enum=kwik.metadata.MetadataFrameType" json:"type,omitempty"`   // Type of metadata frame
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                   // Serialized payload based on frame type
	Timestamp     uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                              // Frame creation timestamp
	SourcePathId  string                 `protobuf:"bytes,5,opt,name=source_path_id,json=sourcePathId,proto3" json:"source_path_id,omitempty"`   // Path ID of the sender
	TargetPathId  string                 `protobuf:"bytes,6,opt,name=target_path_id,json=targetPathId,proto3" json:"target_path_id,omitempty"`   // Path ID of the intended recipient (optional)
	PayloadLength uint32                 `protobuf:"varint,7,opt,name=payload_length,json=payloadLength,proto3" json:"payload_length,omitempty"` // Length of payload for validation
	Checksum      uint32                 `protobuf:"varint,8,opt,name=checksum,proto3" json:"checksum,omitempty"`                                // Frame checksum for integrity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMetadataFrame) Reset() {
	*x = StreamMetadataFrame{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMetadataFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetadataFrame) ProtoMessage() {}

func (x *StreamMetadataFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetadataFrame.ProtoReflect.Descriptor instead.
func (*StreamMetadataFrame) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *StreamMetadataFrame) GetFrameId() uint64 {
	if x != nil {
		return x.FrameId
	}
	return 0
}

func (x *StreamMetadataFrame) GetType() MetadataFrameType {
	if x != nil {
		return x.Type
	}
	return MetadataFrameType_SECONDARY_STREAM_OPEN
}

func (x *StreamMetadataFrame) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *StreamMetadataFrame) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamMetadataFrame) GetSourcePathId() string {
	if x != nil {
		return x.SourcePathId
	}
	return ""
}

func (x *StreamMetadataFrame) GetTargetPathId() string {
	if x != nil {
		return x.TargetPathId
	}
	return ""
}

func (x *StreamMetadataFrame) GetPayloadLength() uint32 {
	if x != nil {
		return x.PayloadLength
	}
	return 0
}

func (x *StreamMetadataFrame) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

// Stream mapping update - notify about changes in stream mappings
type StreamMappingUpdate struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SecondaryStreamId uint64                 `protobuf:"varint,1,opt,name=secondary_stream_id,json=secondaryStreamId,proto3" json:"secondary_stream_id,omitempty"`                             // Secondary stream ID
	KwikStreamId      uint64                 `protobuf:"varint,2,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`                                            // KWIK logical stream ID
	PathId            string                 `protobuf:"bytes,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`                                                                 // Path ID where mapping applies
	Operation         MappingOperation       `protobuf:"varint,4,opt,name=operation,proto3,enum=kwik.metadata.MappingOperation" json:"operation,omitempty"`                                    // Type of mapping operation
	Timestamp         uint64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                        // Operation timestamp
	InitialOffset     uint64                 `protobuf:"varint,6,opt,name=initial_offset,json=initialOffset,proto3" json:"initial_offset,omitempty"`                                           // Initial offset for CREATE operations
	CurrentOffset     uint64                 `protobuf:"varint,7,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`                                           // Current offset for UPDATE operations
	Reason            string                 `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`                                                                               // Reason for the operation (optional)
	Metadata          map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional mapping metadata
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamMappingUpdate) Reset() {
	*x = StreamMappingUpdate{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMappingUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMappingUpdate) ProtoMessage() {}

func (x *StreamMappingUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMappingUpdate.ProtoReflect.Descriptor instead.
func (*StreamMappingUpdate) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *StreamMappingUpdate) GetSecondaryStreamId() uint64 {
	if x != nil {
		return x.SecondaryStreamId
	}
	return 0
}

func (x *StreamMappingUpdate) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *StreamMappingUpdate) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *StreamMappingUpdate) GetOperation() MappingOperation {
	if x != nil {
		return x.Operation
	}
	return MappingOperation_MAPPING_CREATE
}

func (x *StreamMappingUpdate) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamMappingUpdate) GetInitialOffset() uint64 {
	if x != nil {
		return x.InitialOffset
	}
	return 0
}

func (x *StreamMappingUpdate) GetCurrentOffset() uint64 {
	if x != nil {
		return x.CurrentOffset
	}
	return 0
}

func (x *StreamMappingUpdate) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StreamMappingUpdate) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Stream mapping query - request information about stream mappings
type StreamMappingQuery struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	QueryType           QueryType              `protobuf:"varint,1,opt,name=query_type,json=queryType,proto3,enum=kwik.metadata.QueryType" json:"query_type,omitempty"` // Type of query
	StreamId            uint64                 `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                 // Stream ID to query (secondary or KWIK)
	PathId              string                 `protobuf:"bytes,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`                                        // Path ID to query (optional)
	Timestamp           uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                               // Query timestamp
	RequestingComponent string                 `protobuf:"bytes,5,opt,name=requesting_component,json=requestingComponent,proto3" json:"requesting_component,omitempty"` // Component making the query
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StreamMappingQuery) Reset() {
	*x = StreamMappingQuery{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMappingQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMappingQuery) ProtoMessage() {}

func (x *StreamMappingQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMappingQuery.ProtoReflect.Descriptor instead.
func (*StreamMappingQuery) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *StreamMappingQuery) GetQueryType() QueryType {
	if x != nil {
		return x.QueryType
	}
	return QueryType_QUERY_BY_SECONDARY_STREAM
}

func (x *StreamMappingQuery) GetStreamId() uint64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *StreamMappingQuery) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *StreamMappingQuery) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamMappingQuery) GetRequestingComponent() string {
	if x != nil {
		return x.RequestingComponent
	}
	return ""
}

// Stream mapping response - response to mapping query
type StreamMappingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                  // Whether query was successful
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`     // Error message if not successful
	Mappings      []*MappingInfo         `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`                                 // List of matching mappings
	Timestamp     uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                              // Response timestamp
	TotalMappings uint64                 `protobuf:"varint,5,opt,name=total_mappings,json=totalMappings,proto3" json:"total_mappings,omitempty"` // Total number of mappings found
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMappingResponse) Reset() {
	*x = StreamMappingResponse{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMappingResponse) ProtoMessage() {}

func (x *StreamMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMappingResponse.ProtoReflect.Descriptor instead.
func (*StreamMappingResponse) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *StreamMappingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StreamMappingResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *StreamMappingResponse) GetMappings() []*MappingInfo {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *StreamMappingResponse) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamMappingResponse) GetTotalMappings() uint64 {
	if x != nil {
		return x.TotalMappings
	}
	return 0
}

// Mapping information - details about a stream mapping
type MappingInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SecondaryStreamId uint64                 `protobuf:"varint,1,opt,name=secondary_stream_id,json=secondaryStreamId,proto3" json:"secondary_stream_id,omitempty"`                             // Secondary stream ID
	KwikStreamId      uint64                 `protobuf:"varint,2,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`                                            // KWIK logical stream ID
	PathId            string                 `protobuf:"bytes,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`                                                                 // Path ID
	State             MappingState           `protobuf:"varint,4,opt,name=state,proto3,enum=kwik.metadata.MappingState" json:"state,omitempty"`                                                // Current mapping state
	CreatedAt         uint64                 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                       // Mapping creation timestamp
	LastActivity      uint64                 `protobuf:"varint,6,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`                                              // Last activity timestamp
	CurrentOffset     uint64                 `protobuf:"varint,7,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`                                           // Current offset in KWIK stream
	BytesTransferred  uint64                 `protobuf:"varint,8,opt,name=bytes_transferred,json=bytesTransferred,proto3" json:"bytes_transferred,omitempty"`                                  // Total bytes transferred through mapping
	Metadata          map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional mapping metadata
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MappingInfo) Reset() {
	*x = MappingInfo{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingInfo) ProtoMessage() {}

func (x *MappingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingInfo.ProtoReflect.Descriptor instead.
func (*MappingInfo) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *MappingInfo) GetSecondaryStreamId() uint64 {
	if x != nil {
		return x.SecondaryStreamId
	}
	return 0
}

func (x *MappingInfo) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *MappingInfo) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *MappingInfo) GetState() MappingState {
	if x != nil {
		return x.State
	}
	return MappingState_MAPPING_ACTIVE
}

func (x *MappingInfo) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MappingInfo) GetLastActivity() uint64 {
	if x != nil {
		return x.LastActivity
	}
	return 0
}

func (x *MappingInfo) GetCurrentOffset() uint64 {
	if x != nil {
		return x.CurrentOffset
	}
	return 0
}

func (x *MappingInfo) GetBytesTransferred() uint64 {
	if x != nil {
		return x.BytesTransferred
	}
	return 0
}

func (x *MappingInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Aggregation status - status of data aggregation operations
type AggregationStatus struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	KwikStreamId       uint64                 `protobuf:"varint,1,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`                   // KWIK stream ID being aggregated
	State              AggregationState       `protobuf:"varint,2,opt,name=state,proto3,enum=kwik.metadata.AggregationState" json:"state,omitempty"`                   // Current aggregation state
	TotalSources       uint64                 `protobuf:"varint,3,opt,name=total_sources,json=totalSources,proto3" json:"total_sources,omitempty"`                     // Total number of data sources
	ActiveSources      uint64                 `protobuf:"varint,4,opt,name=active_sources,json=activeSources,proto3" json:"active_sources,omitempty"`                  // Number of active data sources
	NextExpectedOffset uint64                 `protobuf:"varint,5,opt,name=next_expected_offset,json=nextExpectedOffset,proto3" json:"next_expected_offset,omitempty"` // Next expected offset in KWIK stream
	Sources            []*SourceStatus        `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`                                                    // Status of individual sources
	Timestamp          uint64                 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                               // Status timestamp
	Metrics            *AggregationMetrics    `protobuf:"bytes,8,opt,name=metrics,proto3" json:"metrics,omitempty"`                                                    // Aggregation performance metrics
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AggregationStatus) Reset() {
	*x = AggregationStatus{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationStatus) ProtoMessage() {}

func (x *AggregationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationStatus.ProtoReflect.Descriptor instead.
func (*AggregationStatus) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{5}
}

func (x *AggregationStatus) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *AggregationStatus) GetState() AggregationState {
	if x != nil {
		return x.State
	}
	return AggregationState_AGGREGATION_IDLE
}

func (x *AggregationStatus) GetTotalSources() uint64 {
	if x != nil {
		return x.TotalSources
	}
	return 0
}

func (x *AggregationStatus) GetActiveSources() uint64 {
	if x != nil {
		return x.ActiveSources
	}
	return 0
}

func (x *AggregationStatus) GetNextExpectedOffset() uint64 {
	if x != nil {
		return x.NextExpectedOffset
	}
	return 0
}

func (x *AggregationStatus) GetSources() []*SourceStatus {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *AggregationStatus) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AggregationStatus) GetMetrics() *AggregationMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Source status - status of individual data sources
type SourceStatus struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SourcePathId      string                 `protobuf:"bytes,1,opt,name=source_path_id,json=sourcePathId,proto3" json:"source_path_id,omitempty"`                 // Path ID of the source
	SecondaryStreamId uint64                 `protobuf:"varint,2,opt,name=secondary_stream_id,json=secondaryStreamId,proto3" json:"secondary_stream_id,omitempty"` // Secondary stream ID
	State             SourceState            `protobuf:"varint,3,opt,name=state,proto3,enum=kwik.metadata.SourceState" json:"state,omitempty"`                     // Current source state
	CurrentOffset     uint64                 `protobuf:"varint,4,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`               // Current offset from this source
	BytesContributed  uint64                 `protobuf:"varint,5,opt,name=bytes_contributed,json=bytesContributed,proto3" json:"bytes_contributed,omitempty"`      // Bytes contributed by this source
	LastActivity      uint64                 `protobuf:"varint,6,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`                  // Last activity timestamp
	ErrorCount        uint32                 `protobuf:"varint,7,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`                        // Number of errors from this source
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SourceStatus) Reset() {
	*x = SourceStatus{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceStatus) ProtoMessage() {}

func (x *SourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceStatus.ProtoReflect.Descriptor instead.
func (*SourceStatus) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{6}
}

func (x *SourceStatus) GetSourcePathId() string {
	if x != nil {
		return x.SourcePathId
	}
	return ""
}

func (x *SourceStatus) GetSecondaryStreamId() uint64 {
	if x != nil {
		return x.SecondaryStreamId
	}
	return 0
}

func (x *SourceStatus) GetState() SourceState {
	if x != nil {
		return x.State
	}
	return SourceState_SOURCE_ACTIVE
}

func (x *SourceStatus) GetCurrentOffset() uint64 {
	if x != nil {
		return x.CurrentOffset
	}
	return 0
}

func (x *SourceStatus) GetBytesContributed() uint64 {
	if x != nil {
		return x.BytesContributed
	}
	return 0
}

func (x *SourceStatus) GetLastActivity() uint64 {
	if x != nil {
		return x.LastActivity
	}
	return 0
}

func (x *SourceStatus) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

// Aggregation metrics - performance metrics for aggregation
type AggregationMetrics struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TotalFramesProcessed  uint64                 `protobuf:"varint,1,opt,name=total_frames_processed,json=totalFramesProcessed,proto3" json:"total_frames_processed,omitempty"`   // Total frames processed
	TotalBytesAggregated  uint64                 `protobuf:"varint,2,opt,name=total_bytes_aggregated,json=totalBytesAggregated,proto3" json:"total_bytes_aggregated,omitempty"`   // Total bytes aggregated
	ReorderEvents         uint64                 `protobuf:"varint,3,opt,name=reorder_events,json=reorderEvents,proto3" json:"reorder_events,omitempty"`                          // Number of reordering events
	DuplicateFrames       uint64                 `protobuf:"varint,4,opt,name=duplicate_frames,json=duplicateFrames,proto3" json:"duplicate_frames,omitempty"`                    // Number of duplicate frames detected
	OffsetConflicts       uint64                 `protobuf:"varint,5,opt,name=offset_conflicts,json=offsetConflicts,proto3" json:"offset_conflicts,omitempty"`                    // Number of offset conflicts resolved
	AggregationEfficiency float32                `protobuf:"fixed32,6,opt,name=aggregation_efficiency,json=aggregationEfficiency,proto3" json:"aggregation_efficiency,omitempty"` // Aggregation efficiency (0.0 to 1.0)
	AverageLatencyUs      uint64                 `protobuf:"varint,7,opt,name=average_latency_us,json=averageLatencyUs,proto3" json:"average_latency_us,omitempty"`               // Average aggregation latency in microseconds
	MaxLatencyUs          uint64                 `protobuf:"varint,8,opt,name=max_latency_us,json=maxLatencyUs,proto3" json:"max_latency_us,omitempty"`                           // Maximum aggregation latency in microseconds
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AggregationMetrics) Reset() {
	*x = AggregationMetrics{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationMetrics) ProtoMessage() {}

func (x *AggregationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationMetrics.ProtoReflect.Descriptor instead.
func (*AggregationMetrics) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{7}
}

func (x *AggregationMetrics) GetTotalFramesProcessed() uint64 {
	if x != nil {
		return x.TotalFramesProcessed
	}
	return 0
}

func (x *AggregationMetrics) GetTotalBytesAggregated() uint64 {
	if x != nil {
		return x.TotalBytesAggregated
	}
	return 0
}

func (x *AggregationMetrics) GetReorderEvents() uint64 {
	if x != nil {
		return x.ReorderEvents
	}
	return 0
}

func (x *AggregationMetrics) GetDuplicateFrames() uint64 {
	if x != nil {
		return x.DuplicateFrames
	}
	return 0
}

func (x *AggregationMetrics) GetOffsetConflicts() uint64 {
	if x != nil {
		return x.OffsetConflicts
	}
	return 0
}

func (x *AggregationMetrics) GetAggregationEfficiency() float32 {
	if x != nil {
		return x.AggregationEfficiency
	}
	return 0
}

func (x *AggregationMetrics) GetAverageLatencyUs() uint64 {
	if x != nil {
		return x.AverageLatencyUs
	}
	return 0
}

func (x *AggregationMetrics) GetMaxLatencyUs() uint64 {
	if x != nil {
		return x.MaxLatencyUs
	}
	return 0
}

// Error notification - notify about errors in metadata processing
type ErrorNotification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode          string                 `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`                                                      // Structured error code
	ErrorMessage       string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                             // Human-readable error message
	Severity           ErrorSeverity          `protobuf:"varint,3,opt,name=severity,proto3,enum=kwik.metadata.ErrorSeverity" json:"severity,omitempty"`                                       // Error severity level
	Component          string                 `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`                                                                       // Component that generated the error
	Timestamp          uint64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                      // Error timestamp
	AffectedStreamId   uint64                 `protobuf:"varint,6,opt,name=affected_stream_id,json=affectedStreamId,proto3" json:"affected_stream_id,omitempty"`                              // Stream ID affected by error (optional)
	AffectedPathId     string                 `protobuf:"bytes,7,opt,name=affected_path_id,json=affectedPathId,proto3" json:"affected_path_id,omitempty"`                                     // Path ID affected by error (optional)
	Context            map[string]string      `protobuf:"bytes,8,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional error context
	RecoverySuggestion string                 `protobuf:"bytes,9,opt,name=recovery_suggestion,json=recoverySuggestion,proto3" json:"recovery_suggestion,omitempty"`                           // Suggested recovery action
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ErrorNotification) Reset() {
	*x = ErrorNotification{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorNotification) ProtoMessage() {}

func (x *ErrorNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorNotification.ProtoReflect.Descriptor instead.
func (*ErrorNotification) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorNotification) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ErrorNotification) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrorNotification) GetSeverity() ErrorSeverity {
	if x != nil {
		return x.Severity
	}
	return ErrorSeverity_SEVERITY_INFO
}

func (x *ErrorNotification) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *ErrorNotification) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ErrorNotification) GetAffectedStreamId() uint64 {
	if x != nil {
		return x.AffectedStreamId
	}
	return 0
}

func (x *ErrorNotification) GetAffectedPathId() string {
	if x != nil {
		return x.AffectedPathId
	}
	return ""
}

func (x *ErrorNotification) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ErrorNotification) GetRecoverySuggestion() string {
	if x != nil {
		return x.RecoverySuggestion
	}
	return ""
}

// Metadata protocol configuration - configuration for metadata protocol
type MetadataProtocolConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MaxFrameSize      uint32                 `protobuf:"varint,1,opt,name=max_frame_size,json=maxFrameSize,proto3" json:"max_frame_size,omitempty"`                                           // Maximum metadata frame size
	FrameTimeoutMs    uint32                 `protobuf:"varint,2,opt,name=frame_timeout_ms,json=frameTimeoutMs,proto3" json:"frame_timeout_ms,omitempty"`                                     // Timeout for frame processing
	MaxPendingFrames  uint32                 `protobuf:"varint,3,opt,name=max_pending_frames,json=maxPendingFrames,proto3" json:"max_pending_frames,omitempty"`                               // Maximum pending frames per stream
	EnableChecksums   bool                   `protobuf:"varint,4,opt,name=enable_checksums,json=enableChecksums,proto3" json:"enable_checksums,omitempty"`                                    // Whether to enable frame checksums
	EnableCompression bool                   `protobuf:"varint,5,opt,name=enable_compression,json=enableCompression,proto3" json:"enable_compression,omitempty"`                              // Whether to enable payload compression
	CompressionType   CompressionType        `protobuf:"varint,6,opt,name=compression_type,json=compressionType,proto3,enum=kwik.metadata.CompressionType" json:"compression_type,omitempty"` // Type of compression to use
	BatchSize         uint32                 `protobuf:"varint,7,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                                                      // Batch size for frame processing
	RetryAttempts     uint32                 `protobuf:"varint,8,opt,name=retry_attempts,json=retryAttempts,proto3" json:"retry_attempts,omitempty"`                                          // Number of retry attempts for failed frames
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MetadataProtocolConfig) Reset() {
	*x = MetadataProtocolConfig{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataProtocolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataProtocolConfig) ProtoMessage() {}

func (x *MetadataProtocolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataProtocolConfig.ProtoReflect.Descriptor instead.
func (*MetadataProtocolConfig) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{9}
}

func (x *MetadataProtocolConfig) GetMaxFrameSize() uint32 {
	if x != nil {
		return x.MaxFrameSize
	}
	return 0
}

func (x *MetadataProtocolConfig) GetFrameTimeoutMs() uint32 {
	if x != nil {
		return x.FrameTimeoutMs
	}
	return 0
}

func (x *MetadataProtocolConfig) GetMaxPendingFrames() uint32 {
	if x != nil {
		return x.MaxPendingFrames
	}
	return 0
}

func (x *MetadataProtocolConfig) GetEnableChecksums() bool {
	if x != nil {
		return x.EnableChecksums
	}
	return false
}

func (x *MetadataProtocolConfig) GetEnableCompression() bool {
	if x != nil {
		return x.EnableCompression
	}
	return false
}

func (x *MetadataProtocolConfig) GetCompressionType() CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return CompressionType_COMPRESSION_NONE
}

func (x *MetadataProtocolConfig) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *MetadataProtocolConfig) GetRetryAttempts() uint32 {
	if x != nil {
		return x.RetryAttempts
	}
	return 0
}

// Metadata protocol statistics - statistics for metadata protocol operations
type MetadataProtocolStats struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PathId                  string                 `protobuf:"bytes,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`                                                          // Path ID these stats apply to
	FramesSent              uint64                 `protobuf:"varint,2,opt,name=frames_sent,json=framesSent,proto3" json:"frames_sent,omitempty"`                                             // Total metadata frames sent
	FramesReceived          uint64                 `protobuf:"varint,3,opt,name=frames_received,json=framesReceived,proto3" json:"frames_received,omitempty"`                                 // Total metadata frames received
	FramesProcessed         uint64                 `protobuf:"varint,4,opt,name=frames_processed,json=framesProcessed,proto3" json:"frames_processed,omitempty"`                              // Total frames successfully processed
	FramesFailed            uint64                 `protobuf:"varint,5,opt,name=frames_failed,json=framesFailed,proto3" json:"frames_failed,omitempty"`                                       // Total frames that failed processing
	BytesSent               uint64                 `protobuf:"varint,6,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`                                                // Total metadata bytes sent
	BytesReceived           uint64                 `protobuf:"varint,7,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`                                    // Total metadata bytes received
	ChecksumErrors          uint64                 `protobuf:"varint,8,opt,name=checksum_errors,json=checksumErrors,proto3" json:"checksum_errors,omitempty"`                                 // Number of checksum validation errors
	TimeoutErrors           uint64                 `protobuf:"varint,9,opt,name=timeout_errors,json=timeoutErrors,proto3" json:"timeout_errors,omitempty"`                                    // Number of timeout errors
	ProtocolViolations      uint64                 `protobuf:"varint,10,opt,name=protocol_violations,json=protocolViolations,proto3" json:"protocol_violations,omitempty"`                    // Number of protocol violations detected
	CompressionRatio        float32                `protobuf:"fixed32,11,opt,name=compression_ratio,json=compressionRatio,proto3" json:"compression_ratio,omitempty"`                         // Average compression ratio achieved
	AverageProcessingTimeUs uint64                 `protobuf:"varint,12,opt,name=average_processing_time_us,json=averageProcessingTimeUs,proto3" json:"average_processing_time_us,omitempty"` // Average frame processing time
	LastActivity            uint64                 `protobuf:"varint,13,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`                                      // Timestamp of last activity
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MetadataProtocolStats) Reset() {
	*x = MetadataProtocolStats{}
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataProtocolStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataProtocolStats) ProtoMessage() {}

func (x *MetadataProtocolStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stream_metadata_stream_metadata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataProtocolStats.ProtoReflect.Descriptor instead.
func (*MetadataProtocolStats) Descriptor() ([]byte, []int) {
	return file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP(), []int{10}
}

func (x *MetadataProtocolStats) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *MetadataProtocolStats) GetFramesSent() uint64 {
	if x != nil {
		return x.FramesSent
	}
	return 0
}

func (x *MetadataProtocolStats) GetFramesReceived() uint64 {
	if x != nil {
		return x.FramesReceived
	}
	return 0
}

func (x *MetadataProtocolStats) GetFramesProcessed() uint64 {
	if x != nil {
		return x.FramesProcessed
	}
	return 0
}

func (x *MetadataProtocolStats) GetFramesFailed() uint64 {
	if x != nil {
		return x.FramesFailed
	}
	return 0
}

func (x *MetadataProtocolStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *MetadataProtocolStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *MetadataProtocolStats) GetChecksumErrors() uint64 {
	if x != nil {
		return x.ChecksumErrors
	}
	return 0
}

func (x *MetadataProtocolStats) GetTimeoutErrors() uint64 {
	if x != nil {
		return x.TimeoutErrors
	}
	return 0
}

func (x *MetadataProtocolStats) GetProtocolViolations() uint64 {
	if x != nil {
		return x.ProtocolViolations
	}
	return 0
}

func (x *MetadataProtocolStats) GetCompressionRatio() float32 {
	if x != nil {
		return x.CompressionRatio
	}
	return 0
}

func (x *MetadataProtocolStats) GetAverageProcessingTimeUs() uint64 {
	if x != nil {
		return x.AverageProcessingTimeUs
	}
	return 0
}

func (x *MetadataProtocolStats) GetLastActivity() uint64 {
	if x != nil {
		return x.LastActivity
	}
	return 0
}

var File_proto_stream_metadata_stream_metadata_proto protoreflect.FileDescriptor

const file_proto_stream_metadata_stream_metadata_proto_rawDesc = "" +
	"\n" +
	"+proto/stream_metadata/stream_metadata.proto\x12\rkwik.metadata\"\xad\x02\n" +
	"\x13StreamMetadataFrame\x12\x19\n" +
	"\bframe_id\x18\x01 \x01(\x04R\aframeId\x124\n" +
	"\x04type\x18\x02 \x01(\x0e2 .kwik.metadata.MetadataFrameTypeR\x04type\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x12$\n" +
	"\x0esource_path_id\x18\x05 \x01(\tR\fsourcePathId\x12$\n" +
	"\x0etarget_path_id\x18\x06 \x01(\tR\ftargetPathId\x12%\n" +
	"\x0epayload_length\x18\a \x01(\rR\rpayloadLength\x12\x1a\n" +
	"\bchecksum\x18\b \x01(\rR\bchecksum\"\xd2\x03\n" +
	"\x13StreamMappingUpdate\x12.\n" +
	"\x13secondary_stream_id\x18\x01 \x01(\x04R\x11secondaryStreamId\x12$\n" +
	"\x0ekwik_stream_id\x18\x02 \x01(\x04R\fkwikStreamId\x12\x17\n" +
	"\apath_id\x18\x03 \x01(\tR\x06pathId\x12=\n" +
	"\toperation\x18\x04 \x01(\x0e2\x1f.kwik.metadata.MappingOperationR\toperation\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x04R\ttimestamp\x12%\n" +
	"\x0einitial_offset\x18\x06 \x01(\x04R\rinitialOffset\x12%\n" +
	"\x0ecurrent_offset\x18\a \x01(\x04R\rcurrentOffset\x12\x16\n" +
	"\x06reason\x18\b \x01(\tR\x06reason\x12L\n" +
	"\bmetadata\x18\t \x03(\v20.kwik.metadata.StreamMappingUpdate.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd4\x01\n" +
	"\x12StreamMappingQuery\x127\n" +
	"\n" +
	"query_type\x18\x01 \x01(\x0e2\x18.kwik.metadata.QueryTypeR\tqueryType\x12\x1b\n" +
	"\tstream_id\x18\x02 \x01(\x04R\bstreamId\x12\x17\n" +
	"\apath_id\x18\x03 \x01(\tR\x06pathId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x121\n" +
	"\x14requesting_component\x18\x05 \x01(\tR\x13requestingComponent\"\xd3\x01\n" +
	"\x15StreamMappingResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x126\n" +
	"\bmappings\x18\x03 \x03(\v2\x1a.kwik.metadata.MappingInfoR\bmappings\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x12%\n" +
	"\x0etotal_mappings\x18\x05 \x01(\x04R\rtotalMappings\"\xca\x03\n" +
	"\vMappingInfo\x12.\n" +
	"\x13secondary_stream_id\x18\x01 \x01(\x04R\x11secondaryStreamId\x12$\n" +
	"\x0ekwik_stream_id\x18\x02 \x01(\x04R\fkwikStreamId\x12\x17\n" +
	"\apath_id\x18\x03 \x01(\tR\x06pathId\x121\n" +
	"\x05state\x18\x04 \x01(\x0e2\x1b.kwik.metadata.MappingStateR\x05state\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\x04R\tcreatedAt\x12#\n" +
	"\rlast_activity\x18\x06 \x01(\x04R\flastActivity\x12%\n" +
	"\x0ecurrent_offset\x18\a \x01(\x04R\rcurrentOffset\x12+\n" +
	"\x11bytes_transferred\x18\b \x01(\x04R\x10bytesTransferred\x12D\n" +
	"\bmetadata\x18\t \x03(\v2(.kwik.metadata.MappingInfo.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x80\x03\n" +
	"\x11AggregationStatus\x12$\n" +
	"\x0ekwik_stream_id\x18\x01 \x01(\x04R\fkwikStreamId\x125\n" +
	"\x05state\x18\x02 \x01(\x0e2\x1f.kwik.metadata.AggregationStateR\x05state\x12#\n" +
	"\rtotal_sources\x18\x03 \x01(\x04R\ftotalSources\x12%\n" +
	"\x0eactive_sources\x18\x04 \x01(\x04R\ractiveSources\x120\n" +
	"\x14next_expected_offset\x18\x05 \x01(\x04R\x12nextExpectedOffset\x125\n" +
	"\asources\x18\x06 \x03(\v2\x1b.kwik.metadata.SourceStatusR\asources\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x04R\ttimestamp\x12;\n" +
	"\ametrics\x18\b \x01(\v2!.kwik.metadata.AggregationMetricsR\ametrics\"\xb0\x02\n" +
	"\fSourceStatus\x12$\n" +
	"\x0esource_path_id\x18\x01 \x01(\tR\fsourcePathId\x12.\n" +
	"\x13secondary_stream_id\x18\x02 \x01(\x04R\x11secondaryStreamId\x120\n" +
	"\x05state\x18\x03 \x01(\x0e2\x1a.kwik.metadata.SourceStateR\x05state\x12%\n" +
	"\x0ecurrent_offset\x18\x04 \x01(\x04R\rcurrentOffset\x12+\n" +
	"\x11bytes_contributed\x18\x05 \x01(\x04R\x10bytesContributed\x12#\n" +
	"\rlast_activity\x18\x06 \x01(\x04R\flastActivity\x12\x1f\n" +
	"\verror_count\x18\a \x01(\rR\n" +
	"errorCount\"\x88\x03\n" +
	"\x12AggregationMetrics\x124\n" +
	"\x16total_frames_processed\x18\x01 \x01(\x04R\x14totalFramesProcessed\x124\n" +
	"\x16total_bytes_aggregated\x18\x02 \x01(\x04R\x14totalBytesAggregated\x12%\n" +
	"\x0ereorder_events\x18\x03 \x01(\x04R\rreorderEvents\x12)\n" +
	"\x10duplicate_frames\x18\x04 \x01(\x04R\x0fduplicateFrames\x12)\n" +
	"\x10offset_conflicts\x18\x05 \x01(\x04R\x0foffsetConflicts\x125\n" +
	"\x16aggregation_efficiency\x18\x06 \x01(\x02R\x15aggregationEfficiency\x12,\n" +
	"\x12average_latency_us\x18\a \x01(\x04R\x10averageLatencyUs\x12$\n" +
	"\x0emax_latency_us\x18\b \x01(\x04R\fmaxLatencyUs\"\xdb\x03\n" +
	"\x11ErrorNotification\x12\x1d\n" +
	"\n" +
	"error_code\x18\x01 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x128\n" +
	"\bseverity\x18\x03 \x01(\x0e2\x1c.kwik.metadata.ErrorSeverityR\bseverity\x12\x1c\n" +
	"\tcomponent\x18\x04 \x01(\tR\tcomponent\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x04R\ttimestamp\x12,\n" +
	"\x12affected_stream_id\x18\x06 \x01(\x04R\x10affectedStreamId\x12(\n" +
	"\x10affected_path_id\x18\a \x01(\tR\x0eaffectedPathId\x12G\n" +
	"\acontext\x18\b \x03(\v2-.kwik.metadata.ErrorNotification.ContextEntryR\acontext\x12/\n" +
	"\x13recovery_suggestion\x18\t \x01(\tR\x12recoverySuggestion\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x81\x03\n" +
	"\x16MetadataProtocolConfig\x12$\n" +
	"\x0emax_frame_size\x18\x01 \x01(\rR\fmaxFrameSize\x12(\n" +
	"\x10frame_timeout_ms\x18\x02 \x01(\rR\x0eframeTimeoutMs\x12,\n" +
	"\x12max_pending_frames\x18\x03 \x01(\rR\x10maxPendingFrames\x12)\n" +
	"\x10enable_checksums\x18\x04 \x01(\bR\x0fenableChecksums\x12-\n" +
	"\x12enable_compression\x18\x05 \x01(\bR\x11enableCompression\x12I\n" +
	"\x10compression_type\x18\x06 \x01(\x0e2\x1e.kwik.metadata.CompressionTypeR\x0fcompressionType\x12\x1d\n" +
	"\n" +
	"batch_size\x18\a \x01(\rR\tbatchSize\x12%\n" +
	"\x0eretry_attempts\x18\b \x01(\rR\rretryAttempts\"\xa0\x04\n" +
	"\x15MetadataProtocolStats\x12\x17\n" +
	"\apath_id\x18\x01 \x01(\tR\x06pathId\x12\x1f\n" +
	"\vframes_sent\x18\x02 \x01(\x04R\n" +
	"framesSent\x12'\n" +
	"\x0fframes_received\x18\x03 \x01(\x04R\x0eframesReceived\x12)\n" +
	"\x10frames_processed\x18\x04 \x01(\x04R\x0fframesProcessed\x12#\n" +
	"\rframes_failed\x18\x05 \x01(\x04R\fframesFailed\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x06 \x01(\x04R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\a \x01(\x04R\rbytesReceived\x12'\n" +
	"\x0fchecksum_errors\x18\b \x01(\x04R\x0echecksumErrors\x12%\n" +
	"\x0etimeout_errors\x18\t \x01(\x04R\rtimeoutErrors\x12/\n" +
	"\x13protocol_violations\x18\n" +
	" \x01(\x04R\x12protocolViolations\x12+\n" +
	"\x11compression_ratio\x18\v \x01(\x02R\x10compressionRatio\x12;\n" +
	"\x1aaverage_processing_time_us\x18\f \x01(\x04R\x17averageProcessingTimeUs\x12#\n" +
	"\rlast_activity\x18\r \x01(\x04R\flastActivity*\x9a\x02\n" +
	"\x11MetadataFrameType\x12\x19\n" +
	"\x15SECONDARY_STREAM_OPEN\x10\x00\x12\x19\n" +
	"\x15SECONDARY_STREAM_DATA\x10\x01\x12\x1a\n" +
	"\x16SECONDARY_STREAM_CLOSE\x10\x02\x12\x17\n" +
	"\x13OFFSET_SYNC_REQUEST\x10\x03\x12\x18\n" +
	"\x14OFFSET_SYNC_RESPONSE\x10\x04\x12\x19\n" +
	"\x15STREAM_MAPPING_UPDATE\x10\x05\x12\x18\n" +
	"\x14STREAM_MAPPING_QUERY\x10\x06\x12\x1b\n" +
	"\x17STREAM_MAPPING_RESPONSE\x10\a\x12\x16\n" +
	"\x12AGGREGATION_STATUS\x10\b\x12\x16\n" +
	"\x12ERROR_NOTIFICATION\x10\t*w\n" +
	"\x10MappingOperation\x12\x12\n" +
	"\x0eMAPPING_CREATE\x10\x00\x12\x12\n" +
	"\x0eMAPPING_UPDATE\x10\x01\x12\x12\n" +
	"\x0eMAPPING_DELETE\x10\x02\x12\x13\n" +
	"\x0fMAPPING_SUSPEND\x10\x03\x12\x12\n" +
	"\x0eMAPPING_RESUME\x10\x04*m\n" +
	"\tQueryType\x12\x1d\n" +
	"\x19QUERY_BY_SECONDARY_STREAM\x10\x00\x12\x18\n" +
	"\x14QUERY_BY_KWIK_STREAM\x10\x01\x12\x11\n" +
	"\rQUERY_BY_PATH\x10\x02\x12\x14\n" +
	"\x10QUERY_ALL_ACTIVE\x10\x03*u\n" +
	"\fMappingState\x12\x12\n" +
	"\x0eMAPPING_ACTIVE\x10\x00\x12\x15\n" +
	"\x11MAPPING_SUSPENDED\x10\x01\x12\x13\n" +
	"\x0fMAPPING_CLOSING\x10\x02\x12\x12\n" +
	"\x0eMAPPING_CLOSED\x10\x03\x12\x11\n" +
	"\rMAPPING_ERROR\x10\x04*\x8a\x01\n" +
	"\x10AggregationState\x12\x14\n" +
	"\x10AGGREGATION_IDLE\x10\x00\x12\x16\n" +
	"\x12AGGREGATION_ACTIVE\x10\x01\x12\x17\n" +
	"\x13AGGREGATION_WAITING\x10\x02\x12\x15\n" +
	"\x11AGGREGATION_ERROR\x10\x03\x12\x18\n" +
	"\x14AGGREGATION_COMPLETE\x10\x04*j\n" +
	"\vSourceState\x12\x11\n" +
	"\rSOURCE_ACTIVE\x10\x00\x12\x0f\n" +
	"\vSOURCE_IDLE\x10\x01\x12\x12\n" +
	"\x0eSOURCE_STALLED\x10\x02\x12\x10\n" +
	"\fSOURCE_ERROR\x10\x03\x12\x11\n" +
	"\rSOURCE_CLOSED\x10\x04*w\n" +
	"\rErrorSeverity\x12\x11\n" +
	"\rSEVERITY_INFO\x10\x00\x12\x14\n" +
	"\x10SEVERITY_WARNING\x10\x01\x12\x12\n" +
	"\x0eSEVERITY_ERROR\x10\x02\x12\x15\n" +
	"\x11SEVERITY_CRITICAL\x10\x03\x12\x12\n" +
	"\x0eSEVERITY_FATAL\x10\x04*h\n" +
	"\x0fCompressionType\x12\x14\n" +
	"\x10COMPRESSION_NONE\x10\x00\x12\x14\n" +
	"\x10COMPRESSION_GZIP\x10\x01\x12\x13\n" +
	"\x0fCOMPRESSION_LZ4\x10\x02\x12\x14\n" +
	"\x10COMPRESSION_ZSTD\x10\x03B\x1cZ\x1akwik/proto/stream_metadatab\x06proto3"

var (
	file_proto_stream_metadata_stream_metadata_proto_rawDescOnce sync.Once
	file_proto_stream_metadata_stream_metadata_proto_rawDescData []byte
)

func file_proto_stream_metadata_stream_metadata_proto_rawDescGZIP() []byte {
	file_proto_stream_metadata_stream_metadata_proto_rawDescOnce.Do(func() {
		file_proto_stream_metadata_stream_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_stream_metadata_stream_metadata_proto_rawDesc), len(file_proto_stream_metadata_stream_metadata_proto_rawDesc)))
	})
	return file_proto_stream_metadata_stream_metadata_proto_rawDescData
}

var file_proto_stream_metadata_stream_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_proto_stream_metadata_stream_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_stream_metadata_stream_metadata_proto_goTypes = []any{
	(MetadataFrameType)(0),         // 0: kwik.metadata.MetadataFrameType
	(MappingOperation)(0),          // 1: kwik.metadata.MappingOperation
	(QueryType)(0),                 // 2: kwik.metadata.QueryType
	(MappingState)(0),              // 3: kwik.metadata.MappingState
	(AggregationState)(0),          // 4: kwik.metadata.AggregationState
	(SourceState)(0),               // 5: kwik.metadata.SourceState
	(ErrorSeverity)(0),             // 6: kwik.metadata.ErrorSeverity
	(CompressionType)(0),           // 7: kwik.metadata.CompressionType
	(*StreamMetadataFrame)(nil),    // 8: kwik.metadata.StreamMetadataFrame
	(*StreamMappingUpdate)(nil),    // 9: kwik.metadata.StreamMappingUpdate
	(*StreamMappingQuery)(nil),     // 10: kwik.metadata.StreamMappingQuery
	(*StreamMappingResponse)(nil),  // 11: kwik.metadata.StreamMappingResponse
	(*MappingInfo)(nil),            // 12: kwik.metadata.MappingInfo
	(*AggregationStatus)(nil),      // 13: kwik.metadata.AggregationStatus
	(*SourceStatus)(nil),           // 14: kwik.metadata.SourceStatus
	(*AggregationMetrics)(nil),     // 15: kwik.metadata.AggregationMetrics
	(*ErrorNotification)(nil),      // 16: kwik.metadata.ErrorNotification
	(*MetadataProtocolConfig)(nil), // 17: kwik.metadata.MetadataProtocolConfig
	(*MetadataProtocolStats)(nil),  // 18: kwik.metadata.MetadataProtocolStats
	nil,                            // 19: kwik.metadata.StreamMappingUpdate.MetadataEntry
	nil,                            // 20: kwik.metadata.MappingInfo.MetadataEntry
	nil,                            // 21: kwik.metadata.ErrorNotification.ContextEntry
}
var file_proto_stream_metadata_stream_metadata_proto_depIdxs = []int32{
	0,  // 0: kwik.metadata.StreamMetadataFrame.type:type_name -> kwik.metadata.MetadataFrameType
	1,  // 1: kwik.metadata.StreamMappingUpdate.operation:type_name -> kwik.metadata.MappingOperation
	19, // 2: kwik.metadata.StreamMappingUpdate.metadata:type_name -> kwik.metadata.StreamMappingUpdate.MetadataEntry
	2,  // 3: kwik.metadata.StreamMappingQuery.query_type:type_name -> kwik.metadata.QueryType
	12, // 4: kwik.metadata.StreamMappingResponse.mappings:type_name -> kwik.metadata.MappingInfo
	3,  // 5: kwik.metadata.MappingInfo.state:type_name -> kwik.metadata.MappingState
	20, // 6: kwik.metadata.MappingInfo.metadata:type_name -> kwik.metadata.MappingInfo.MetadataEntry
	4,  // 7: kwik.metadata.AggregationStatus.state:type_name -> kwik.metadata.AggregationState
	14, // 8: kwik.metadata.AggregationStatus.sources:type_name -> kwik.metadata.SourceStatus
	15, // 9: kwik.metadata.AggregationStatus.metrics:type_name -> kwik.metadata.AggregationMetrics
	5,  // 10: kwik.metadata.SourceStatus.state:type_name -> kwik.metadata.SourceState
	6,  // 11: kwik.metadata.ErrorNotification.severity:type_name -> kwik.metadata.ErrorSeverity
	21, // 12: kwik.metadata.ErrorNotification.context:type_name -> kwik.metadata.ErrorNotification.ContextEntry
	7,  // 13: kwik.metadata.MetadataProtocolConfig.compression_type:type_name -> kwik.metadata.CompressionType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_stream_metadata_stream_metadata_proto_init() }
func file_proto_stream_metadata_stream_metadata_proto_init() {
	if File_proto_stream_metadata_stream_metadata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_stream_metadata_stream_metadata_proto_rawDesc), len(file_proto_stream_metadata_stream_metadata_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_stream_metadata_stream_metadata_proto_goTypes,
		DependencyIndexes: file_proto_stream_metadata_stream_metadata_proto_depIdxs,
		EnumInfos:         file_proto_stream_metadata_stream_metadata_proto_enumTypes,
		MessageInfos:      file_proto_stream_metadata_stream_metadata_proto_msgTypes,
	}.Build()
	File_proto_stream_metadata_stream_metadata_proto = out.File
	file_proto_stream_metadata_stream_metadata_proto_goTypes = nil
	file_proto_stream_metadata_stream_metadata_proto_depIdxs = nil
}
