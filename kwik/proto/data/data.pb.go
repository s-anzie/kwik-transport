// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto/data.proto

package data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Compression types
type CompressionType int32

const (
	CompressionType_COMPRESSION_NONE CompressionType = 0
	CompressionType_COMPRESSION_GZIP CompressionType = 1
	CompressionType_COMPRESSION_LZ4  CompressionType = 2
	CompressionType_COMPRESSION_ZSTD CompressionType = 3
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "COMPRESSION_NONE",
		1: "COMPRESSION_GZIP",
		2: "COMPRESSION_LZ4",
		3: "COMPRESSION_ZSTD",
	}
	CompressionType_value = map[string]int32{
		"COMPRESSION_NONE": 0,
		"COMPRESSION_GZIP": 1,
		"COMPRESSION_LZ4":  2,
		"COMPRESSION_ZSTD": 3,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_data_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_proto_data_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{0}
}

// Data frame types - all possible data plane frame types
type DataFrameType int32

const (
	DataFrameType_DATA_FRAME_DATA                    DataFrameType = 0
	DataFrameType_DATA_FRAME_ACK                     DataFrameType = 1
	DataFrameType_DATA_FRAME_STREAM_FLOW_CONTROL     DataFrameType = 2
	DataFrameType_DATA_FRAME_CONNECTION_FLOW_CONTROL DataFrameType = 3
	DataFrameType_DATA_FRAME_STREAM_RESET            DataFrameType = 4
	DataFrameType_DATA_FRAME_STOP_SENDING            DataFrameType = 5
	DataFrameType_DATA_FRAME_CRYPTO                  DataFrameType = 6
	DataFrameType_DATA_FRAME_NEW_CONNECTION_ID       DataFrameType = 7
	DataFrameType_DATA_FRAME_RETIRE_CONNECTION_ID    DataFrameType = 8
	DataFrameType_DATA_FRAME_PATH_CHALLENGE          DataFrameType = 9
	DataFrameType_DATA_FRAME_PATH_RESPONSE           DataFrameType = 10
	DataFrameType_DATA_FRAME_CONNECTION_CLOSE        DataFrameType = 11
	DataFrameType_DATA_FRAME_PADDING                 DataFrameType = 12
	DataFrameType_DATA_FRAME_PING                    DataFrameType = 13
)

// Enum value maps for DataFrameType.
var (
	DataFrameType_name = map[int32]string{
		0:  "DATA_FRAME_DATA",
		1:  "DATA_FRAME_ACK",
		2:  "DATA_FRAME_STREAM_FLOW_CONTROL",
		3:  "DATA_FRAME_CONNECTION_FLOW_CONTROL",
		4:  "DATA_FRAME_STREAM_RESET",
		5:  "DATA_FRAME_STOP_SENDING",
		6:  "DATA_FRAME_CRYPTO",
		7:  "DATA_FRAME_NEW_CONNECTION_ID",
		8:  "DATA_FRAME_RETIRE_CONNECTION_ID",
		9:  "DATA_FRAME_PATH_CHALLENGE",
		10: "DATA_FRAME_PATH_RESPONSE",
		11: "DATA_FRAME_CONNECTION_CLOSE",
		12: "DATA_FRAME_PADDING",
		13: "DATA_FRAME_PING",
	}
	DataFrameType_value = map[string]int32{
		"DATA_FRAME_DATA":                    0,
		"DATA_FRAME_ACK":                     1,
		"DATA_FRAME_STREAM_FLOW_CONTROL":     2,
		"DATA_FRAME_CONNECTION_FLOW_CONTROL": 3,
		"DATA_FRAME_STREAM_RESET":            4,
		"DATA_FRAME_STOP_SENDING":            5,
		"DATA_FRAME_CRYPTO":                  6,
		"DATA_FRAME_NEW_CONNECTION_ID":       7,
		"DATA_FRAME_RETIRE_CONNECTION_ID":    8,
		"DATA_FRAME_PATH_CHALLENGE":          9,
		"DATA_FRAME_PATH_RESPONSE":           10,
		"DATA_FRAME_CONNECTION_CLOSE":        11,
		"DATA_FRAME_PADDING":                 12,
		"DATA_FRAME_PING":                    13,
	}
)

func (x DataFrameType) Enum() *DataFrameType {
	p := new(DataFrameType)
	*p = x
	return p
}

func (x DataFrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataFrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_data_proto_enumTypes[1].Descriptor()
}

func (DataFrameType) Type() protoreflect.EnumType {
	return &file_proto_data_proto_enumTypes[1]
}

func (x DataFrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataFrameType.Descriptor instead.
func (DataFrameType) EnumDescriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{1}
}

// Stream state types
type StreamStateType int32

const (
	StreamStateType_DATA_STREAM_IDLE               StreamStateType = 0
	StreamStateType_DATA_STREAM_OPEN               StreamStateType = 1
	StreamStateType_DATA_STREAM_HALF_CLOSED_LOCAL  StreamStateType = 2
	StreamStateType_DATA_STREAM_HALF_CLOSED_REMOTE StreamStateType = 3
	StreamStateType_DATA_STREAM_CLOSED             StreamStateType = 4
	StreamStateType_DATA_STREAM_RESET_SENT         StreamStateType = 5
	StreamStateType_DATA_STREAM_RESET_RECEIVED     StreamStateType = 6
)

// Enum value maps for StreamStateType.
var (
	StreamStateType_name = map[int32]string{
		0: "DATA_STREAM_IDLE",
		1: "DATA_STREAM_OPEN",
		2: "DATA_STREAM_HALF_CLOSED_LOCAL",
		3: "DATA_STREAM_HALF_CLOSED_REMOTE",
		4: "DATA_STREAM_CLOSED",
		5: "DATA_STREAM_RESET_SENT",
		6: "DATA_STREAM_RESET_RECEIVED",
	}
	StreamStateType_value = map[string]int32{
		"DATA_STREAM_IDLE":               0,
		"DATA_STREAM_OPEN":               1,
		"DATA_STREAM_HALF_CLOSED_LOCAL":  2,
		"DATA_STREAM_HALF_CLOSED_REMOTE": 3,
		"DATA_STREAM_CLOSED":             4,
		"DATA_STREAM_RESET_SENT":         5,
		"DATA_STREAM_RESET_RECEIVED":     6,
	}
)

func (x StreamStateType) Enum() *StreamStateType {
	p := new(StreamStateType)
	*p = x
	return p
}

func (x StreamStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_data_proto_enumTypes[2].Descriptor()
}

func (StreamStateType) Type() protoreflect.EnumType {
	return &file_proto_data_proto_enumTypes[2]
}

func (x StreamStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamStateType.Descriptor instead.
func (StreamStateType) EnumDescriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{2}
}

// Data frame - carries application data for logical streams
type DataFrame struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FrameId         uint64                 `protobuf:"varint,1,opt,name=frame_id,json=frameId,proto3" json:"frame_id,omitempty"`                           // Unique frame identifier
	LogicalStreamId uint64                 `protobuf:"varint,2,opt,name=logical_stream_id,json=logicalStreamId,proto3" json:"logical_stream_id,omitempty"` // KWIK logical stream ID
	Offset          uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                                            // KWIK logical offset (not QUIC offset)
	Data            []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                                 // Application data payload
	Fin             bool                   `protobuf:"varint,5,opt,name=fin,proto3" json:"fin,omitempty"`                                                  // Final frame for this stream
	Timestamp       uint64                 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                      // Frame creation timestamp
	PathId          string                 `protobuf:"bytes,7,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`                               // Path this frame is transmitted on
	DataLength      uint32                 `protobuf:"varint,8,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`                  // Length of data payload
	Checksum        uint32                 `protobuf:"varint,9,opt,name=checksum,proto3" json:"checksum,omitempty"`                                        // Frame data checksum
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DataFrame) Reset() {
	*x = DataFrame{}
	mi := &file_proto_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrame) ProtoMessage() {}

func (x *DataFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrame.ProtoReflect.Descriptor instead.
func (*DataFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{0}
}

func (x *DataFrame) GetFrameId() uint64 {
	if x != nil {
		return x.FrameId
	}
	return 0
}

func (x *DataFrame) GetLogicalStreamId() uint64 {
	if x != nil {
		return x.LogicalStreamId
	}
	return 0
}

func (x *DataFrame) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DataFrame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataFrame) GetFin() bool {
	if x != nil {
		return x.Fin
	}
	return false
}

func (x *DataFrame) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataFrame) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *DataFrame) GetDataLength() uint32 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *DataFrame) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

// Data packet - container for multiple data frames
type DataPacket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PacketId      uint64                 `protobuf:"varint,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"` // Unique packet identifier
	PathId        string                 `protobuf:"bytes,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`        // Path this packet is transmitted on
	Frames        []*DataFrame           `protobuf:"bytes,3,rep,name=frames,proto3" json:"frames,omitempty"`                      // Data frames in this packet
	Checksum      uint32                 `protobuf:"varint,4,opt,name=checksum,proto3" json:"checksum,omitempty"`                 // Packet checksum
	Timestamp     uint64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`               // Packet creation timestamp
	Metadata      *PacketMetadata        `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`                  // Packet metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataPacket) Reset() {
	*x = DataPacket{}
	mi := &file_proto_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPacket) ProtoMessage() {}

func (x *DataPacket) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPacket.ProtoReflect.Descriptor instead.
func (*DataPacket) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{1}
}

func (x *DataPacket) GetPacketId() uint64 {
	if x != nil {
		return x.PacketId
	}
	return 0
}

func (x *DataPacket) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *DataPacket) GetFrames() []*DataFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *DataPacket) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *DataPacket) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataPacket) GetMetadata() *PacketMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Packet metadata - additional packet information
type PacketMetadata struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TotalSize      uint32                 `protobuf:"varint,1,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`                   // Total packet size in bytes
	FrameCount     uint32                 `protobuf:"varint,2,opt,name=frame_count,json=frameCount,proto3" json:"frame_count,omitempty"`                // Number of frames in packet
	Compression    CompressionType        `protobuf:"varint,3,opt,name=compression,proto3,enum=kwik.data.CompressionType" json:"compression,omitempty"` // Compression used
	SequenceNumber uint32                 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`    // Sequence number within path
	Retransmission bool                   `protobuf:"varint,5,opt,name=retransmission,proto3" json:"retransmission,omitempty"`                          // Whether this is a retransmission
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PacketMetadata) Reset() {
	*x = PacketMetadata{}
	mi := &file_proto_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketMetadata) ProtoMessage() {}

func (x *PacketMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketMetadata.ProtoReflect.Descriptor instead.
func (*PacketMetadata) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{2}
}

func (x *PacketMetadata) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *PacketMetadata) GetFrameCount() uint32 {
	if x != nil {
		return x.FrameCount
	}
	return 0
}

func (x *PacketMetadata) GetCompression() CompressionType {
	if x != nil {
		return x.Compression
	}
	return CompressionType_COMPRESSION_NONE
}

func (x *PacketMetadata) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PacketMetadata) GetRetransmission() bool {
	if x != nil {
		return x.Retransmission
	}
	return false
}

// ACK frame - acknowledge received packets
type AckFrame struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AckId          uint64                 `protobuf:"varint,1,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`                                     // Unique ACK identifier
	AckedPacketIds []uint64               `protobuf:"varint,2,rep,packed,name=acked_packet_ids,json=ackedPacketIds,proto3" json:"acked_packet_ids,omitempty"` // Packet IDs being acknowledged
	PathId         string                 `protobuf:"bytes,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`                                   // Path these ACKs apply to
	Timestamp      uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // ACK creation timestamp
	AckRanges      []*AckRange            `protobuf:"bytes,5,rep,name=ack_ranges,json=ackRanges,proto3" json:"ack_ranges,omitempty"`                          // Ranges of acknowledged packets
	LargestAcked   uint64                 `protobuf:"varint,6,opt,name=largest_acked,json=largestAcked,proto3" json:"largest_acked,omitempty"`                // Largest packet ID acknowledged
	AckDelay       uint64                 `protobuf:"varint,7,opt,name=ack_delay,json=ackDelay,proto3" json:"ack_delay,omitempty"`                            // Delay since packet was received (microseconds)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AckFrame) Reset() {
	*x = AckFrame{}
	mi := &file_proto_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckFrame) ProtoMessage() {}

func (x *AckFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckFrame.ProtoReflect.Descriptor instead.
func (*AckFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{3}
}

func (x *AckFrame) GetAckId() uint64 {
	if x != nil {
		return x.AckId
	}
	return 0
}

func (x *AckFrame) GetAckedPacketIds() []uint64 {
	if x != nil {
		return x.AckedPacketIds
	}
	return nil
}

func (x *AckFrame) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *AckFrame) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AckFrame) GetAckRanges() []*AckRange {
	if x != nil {
		return x.AckRanges
	}
	return nil
}

func (x *AckFrame) GetLargestAcked() uint64 {
	if x != nil {
		return x.LargestAcked
	}
	return 0
}

func (x *AckFrame) GetAckDelay() uint64 {
	if x != nil {
		return x.AckDelay
	}
	return 0
}

// ACK range - contiguous range of acknowledged packets
type AckRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint64                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"` // First packet ID in range
	End           uint64                 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`     // Last packet ID in range (inclusive)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckRange) Reset() {
	*x = AckRange{}
	mi := &file_proto_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRange) ProtoMessage() {}

func (x *AckRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRange.ProtoReflect.Descriptor instead.
func (*AckRange) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{4}
}

func (x *AckRange) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AckRange) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

// Stream flow control frame - manage stream-level flow control
type StreamFlowControlFrame struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LogicalStreamId   uint64                 `protobuf:"varint,1,opt,name=logical_stream_id,json=logicalStreamId,proto3" json:"logical_stream_id,omitempty"`
	MaxStreamData     uint64                 `protobuf:"varint,2,opt,name=max_stream_data,json=maxStreamData,proto3" json:"max_stream_data,omitempty"`             // Maximum data allowed on this stream
	StreamDataBlocked uint64                 `protobuf:"varint,3,opt,name=stream_data_blocked,json=streamDataBlocked,proto3" json:"stream_data_blocked,omitempty"` // Stream is blocked at this offset
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamFlowControlFrame) Reset() {
	*x = StreamFlowControlFrame{}
	mi := &file_proto_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFlowControlFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowControlFrame) ProtoMessage() {}

func (x *StreamFlowControlFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowControlFrame.ProtoReflect.Descriptor instead.
func (*StreamFlowControlFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{5}
}

func (x *StreamFlowControlFrame) GetLogicalStreamId() uint64 {
	if x != nil {
		return x.LogicalStreamId
	}
	return 0
}

func (x *StreamFlowControlFrame) GetMaxStreamData() uint64 {
	if x != nil {
		return x.MaxStreamData
	}
	return 0
}

func (x *StreamFlowControlFrame) GetStreamDataBlocked() uint64 {
	if x != nil {
		return x.StreamDataBlocked
	}
	return 0
}

// Connection flow control frame - manage connection-level flow control
type ConnectionFlowControlFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PathId        string                 `protobuf:"bytes,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	MaxData       uint64                 `protobuf:"varint,2,opt,name=max_data,json=maxData,proto3" json:"max_data,omitempty"`             // Maximum data allowed on this path
	DataBlocked   uint64                 `protobuf:"varint,3,opt,name=data_blocked,json=dataBlocked,proto3" json:"data_blocked,omitempty"` // Path is blocked at this offset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionFlowControlFrame) Reset() {
	*x = ConnectionFlowControlFrame{}
	mi := &file_proto_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionFlowControlFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionFlowControlFrame) ProtoMessage() {}

func (x *ConnectionFlowControlFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionFlowControlFrame.ProtoReflect.Descriptor instead.
func (*ConnectionFlowControlFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionFlowControlFrame) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *ConnectionFlowControlFrame) GetMaxData() uint64 {
	if x != nil {
		return x.MaxData
	}
	return 0
}

func (x *ConnectionFlowControlFrame) GetDataBlocked() uint64 {
	if x != nil {
		return x.DataBlocked
	}
	return 0
}

// Stream reset frame - reset a logical stream
type StreamResetFrame struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	LogicalStreamId      uint64                 `protobuf:"varint,1,opt,name=logical_stream_id,json=logicalStreamId,proto3" json:"logical_stream_id,omitempty"`
	ApplicationErrorCode uint64                 `protobuf:"varint,2,opt,name=application_error_code,json=applicationErrorCode,proto3" json:"application_error_code,omitempty"`
	FinalSize            uint64                 `protobuf:"varint,3,opt,name=final_size,json=finalSize,proto3" json:"final_size,omitempty"` // Final size of stream data
	Reason               string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`                         // Human-readable reset reason
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StreamResetFrame) Reset() {
	*x = StreamResetFrame{}
	mi := &file_proto_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResetFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResetFrame) ProtoMessage() {}

func (x *StreamResetFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResetFrame.ProtoReflect.Descriptor instead.
func (*StreamResetFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{7}
}

func (x *StreamResetFrame) GetLogicalStreamId() uint64 {
	if x != nil {
		return x.LogicalStreamId
	}
	return 0
}

func (x *StreamResetFrame) GetApplicationErrorCode() uint64 {
	if x != nil {
		return x.ApplicationErrorCode
	}
	return 0
}

func (x *StreamResetFrame) GetFinalSize() uint64 {
	if x != nil {
		return x.FinalSize
	}
	return 0
}

func (x *StreamResetFrame) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Stop sending frame - request peer to stop sending on stream
type StopSendingFrame struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	LogicalStreamId      uint64                 `protobuf:"varint,1,opt,name=logical_stream_id,json=logicalStreamId,proto3" json:"logical_stream_id,omitempty"`
	ApplicationErrorCode uint64                 `protobuf:"varint,2,opt,name=application_error_code,json=applicationErrorCode,proto3" json:"application_error_code,omitempty"`
	Reason               string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StopSendingFrame) Reset() {
	*x = StopSendingFrame{}
	mi := &file_proto_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSendingFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSendingFrame) ProtoMessage() {}

func (x *StopSendingFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSendingFrame.ProtoReflect.Descriptor instead.
func (*StopSendingFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{8}
}

func (x *StopSendingFrame) GetLogicalStreamId() uint64 {
	if x != nil {
		return x.LogicalStreamId
	}
	return 0
}

func (x *StopSendingFrame) GetApplicationErrorCode() uint64 {
	if x != nil {
		return x.ApplicationErrorCode
	}
	return 0
}

func (x *StopSendingFrame) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Crypto frame - carry cryptographic handshake data
type CryptoFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        uint64                 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`                          // Offset in crypto stream
	CryptoData    []byte                 `protobuf:"bytes,2,opt,name=crypto_data,json=cryptoData,proto3" json:"crypto_data,omitempty"` // Cryptographic handshake data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoFrame) Reset() {
	*x = CryptoFrame{}
	mi := &file_proto_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoFrame) ProtoMessage() {}

func (x *CryptoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoFrame.ProtoReflect.Descriptor instead.
func (*CryptoFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{9}
}

func (x *CryptoFrame) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CryptoFrame) GetCryptoData() []byte {
	if x != nil {
		return x.CryptoData
	}
	return nil
}

// New connection ID frame - provide new connection ID
type NewConnectionIdFrame struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SequenceNumber      uint64                 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	RetirePriorTo       uint64                 `protobuf:"varint,2,opt,name=retire_prior_to,json=retirePriorTo,proto3" json:"retire_prior_to,omitempty"`
	ConnectionId        []byte                 `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	StatelessResetToken []byte                 `protobuf:"bytes,4,opt,name=stateless_reset_token,json=statelessResetToken,proto3" json:"stateless_reset_token,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NewConnectionIdFrame) Reset() {
	*x = NewConnectionIdFrame{}
	mi := &file_proto_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewConnectionIdFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConnectionIdFrame) ProtoMessage() {}

func (x *NewConnectionIdFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConnectionIdFrame.ProtoReflect.Descriptor instead.
func (*NewConnectionIdFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{10}
}

func (x *NewConnectionIdFrame) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *NewConnectionIdFrame) GetRetirePriorTo() uint64 {
	if x != nil {
		return x.RetirePriorTo
	}
	return 0
}

func (x *NewConnectionIdFrame) GetConnectionId() []byte {
	if x != nil {
		return x.ConnectionId
	}
	return nil
}

func (x *NewConnectionIdFrame) GetStatelessResetToken() []byte {
	if x != nil {
		return x.StatelessResetToken
	}
	return nil
}

// Retire connection ID frame - retire old connection ID
type RetireConnectionIdFrame struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SequenceNumber uint64                 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RetireConnectionIdFrame) Reset() {
	*x = RetireConnectionIdFrame{}
	mi := &file_proto_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetireConnectionIdFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetireConnectionIdFrame) ProtoMessage() {}

func (x *RetireConnectionIdFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetireConnectionIdFrame.ProtoReflect.Descriptor instead.
func (*RetireConnectionIdFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{11}
}

func (x *RetireConnectionIdFrame) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Path challenge frame - validate path connectivity
type PathChallengeFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeData []byte                 `protobuf:"bytes,1,opt,name=challenge_data,json=challengeData,proto3" json:"challenge_data,omitempty"` // 8 bytes of challenge data
	PathId        string                 `protobuf:"bytes,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathChallengeFrame) Reset() {
	*x = PathChallengeFrame{}
	mi := &file_proto_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathChallengeFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathChallengeFrame) ProtoMessage() {}

func (x *PathChallengeFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathChallengeFrame.ProtoReflect.Descriptor instead.
func (*PathChallengeFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{12}
}

func (x *PathChallengeFrame) GetChallengeData() []byte {
	if x != nil {
		return x.ChallengeData
	}
	return nil
}

func (x *PathChallengeFrame) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

// Path response frame - respond to path challenge
type PathResponseFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseData  []byte                 `protobuf:"bytes,1,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"` // Echo of challenge data
	PathId        string                 `protobuf:"bytes,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathResponseFrame) Reset() {
	*x = PathResponseFrame{}
	mi := &file_proto_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathResponseFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathResponseFrame) ProtoMessage() {}

func (x *PathResponseFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathResponseFrame.ProtoReflect.Descriptor instead.
func (*PathResponseFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{13}
}

func (x *PathResponseFrame) GetResponseData() []byte {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *PathResponseFrame) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

// Connection close frame - close connection with error
type ConnectionCloseFrame struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode        uint64                 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	FrameType        uint64                 `protobuf:"varint,2,opt,name=frame_type,json=frameType,proto3" json:"frame_type,omitempty"` // Frame type that caused error
	ReasonPhrase     string                 `protobuf:"bytes,3,opt,name=reason_phrase,json=reasonPhrase,proto3" json:"reason_phrase,omitempty"`
	ApplicationError bool                   `protobuf:"varint,4,opt,name=application_error,json=applicationError,proto3" json:"application_error,omitempty"` // Whether this is an application error
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConnectionCloseFrame) Reset() {
	*x = ConnectionCloseFrame{}
	mi := &file_proto_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionCloseFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionCloseFrame) ProtoMessage() {}

func (x *ConnectionCloseFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionCloseFrame.ProtoReflect.Descriptor instead.
func (*ConnectionCloseFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectionCloseFrame) GetErrorCode() uint64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ConnectionCloseFrame) GetFrameType() uint64 {
	if x != nil {
		return x.FrameType
	}
	return 0
}

func (x *ConnectionCloseFrame) GetReasonPhrase() string {
	if x != nil {
		return x.ReasonPhrase
	}
	return ""
}

func (x *ConnectionCloseFrame) GetApplicationError() bool {
	if x != nil {
		return x.ApplicationError
	}
	return false
}

// Padding frame - pad packets to desired size
type PaddingFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PaddingLength uint32                 `protobuf:"varint,1,opt,name=padding_length,json=paddingLength,proto3" json:"padding_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaddingFrame) Reset() {
	*x = PaddingFrame{}
	mi := &file_proto_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaddingFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddingFrame) ProtoMessage() {}

func (x *PaddingFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddingFrame.ProtoReflect.Descriptor instead.
func (*PaddingFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{15}
}

func (x *PaddingFrame) GetPaddingLength() uint32 {
	if x != nil {
		return x.PaddingLength
	}
	return 0
}

// Ping frame - test connectivity
type PingFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PingData      []byte                 `protobuf:"bytes,2,opt,name=ping_data,json=pingData,proto3" json:"ping_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingFrame) Reset() {
	*x = PingFrame{}
	mi := &file_proto_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingFrame) ProtoMessage() {}

func (x *PingFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingFrame.ProtoReflect.Descriptor instead.
func (*PingFrame) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{16}
}

func (x *PingFrame) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PingFrame) GetPingData() []byte {
	if x != nil {
		return x.PingData
	}
	return nil
}

// Data frame container - wrapper for all data plane frames
type DataFrameContainer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          DataFrameType          `protobuf:"varint,1,opt,name=type,proto3,enum=kwik.data.DataFrameType" json:"type,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PathId        string                 `protobuf:"bytes,4,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataFrameContainer) Reset() {
	*x = DataFrameContainer{}
	mi := &file_proto_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataFrameContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameContainer) ProtoMessage() {}

func (x *DataFrameContainer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameContainer.ProtoReflect.Descriptor instead.
func (*DataFrameContainer) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{17}
}

func (x *DataFrameContainer) GetType() DataFrameType {
	if x != nil {
		return x.Type
	}
	return DataFrameType_DATA_FRAME_DATA
}

func (x *DataFrameContainer) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DataFrameContainer) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataFrameContainer) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

// Stream state information
type StreamState struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LogicalStreamId       uint64                 `protobuf:"varint,1,opt,name=logical_stream_id,json=logicalStreamId,proto3" json:"logical_stream_id,omitempty"`
	State                 StreamStateType        `protobuf:"varint,2,opt,name=state,proto3,enum=kwik.data.StreamStateType" json:"state,omitempty"`
	BytesSent             uint64                 `protobuf:"varint,3,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesReceived         uint64                 `protobuf:"varint,4,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	MaxStreamDataSent     uint64                 `protobuf:"varint,5,opt,name=max_stream_data_sent,json=maxStreamDataSent,proto3" json:"max_stream_data_sent,omitempty"`
	MaxStreamDataReceived uint64                 `protobuf:"varint,6,opt,name=max_stream_data_received,json=maxStreamDataReceived,proto3" json:"max_stream_data_received,omitempty"`
	FinSent               bool                   `protobuf:"varint,7,opt,name=fin_sent,json=finSent,proto3" json:"fin_sent,omitempty"`
	FinReceived           bool                   `protobuf:"varint,8,opt,name=fin_received,json=finReceived,proto3" json:"fin_received,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StreamState) Reset() {
	*x = StreamState{}
	mi := &file_proto_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamState) ProtoMessage() {}

func (x *StreamState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamState.ProtoReflect.Descriptor instead.
func (*StreamState) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{18}
}

func (x *StreamState) GetLogicalStreamId() uint64 {
	if x != nil {
		return x.LogicalStreamId
	}
	return 0
}

func (x *StreamState) GetState() StreamStateType {
	if x != nil {
		return x.State
	}
	return StreamStateType_DATA_STREAM_IDLE
}

func (x *StreamState) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *StreamState) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *StreamState) GetMaxStreamDataSent() uint64 {
	if x != nil {
		return x.MaxStreamDataSent
	}
	return 0
}

func (x *StreamState) GetMaxStreamDataReceived() uint64 {
	if x != nil {
		return x.MaxStreamDataReceived
	}
	return 0
}

func (x *StreamState) GetFinSent() bool {
	if x != nil {
		return x.FinSent
	}
	return false
}

func (x *StreamState) GetFinReceived() bool {
	if x != nil {
		return x.FinReceived
	}
	return false
}

// Aggregated data statistics for multi-path
type AggregatedDataStats struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TotalBytesSent       uint64                 `protobuf:"varint,1,opt,name=total_bytes_sent,json=totalBytesSent,proto3" json:"total_bytes_sent,omitempty"`
	TotalBytesReceived   uint64                 `protobuf:"varint,2,opt,name=total_bytes_received,json=totalBytesReceived,proto3" json:"total_bytes_received,omitempty"`
	TotalPacketsSent     uint64                 `protobuf:"varint,3,opt,name=total_packets_sent,json=totalPacketsSent,proto3" json:"total_packets_sent,omitempty"`
	TotalPacketsReceived uint64                 `protobuf:"varint,4,opt,name=total_packets_received,json=totalPacketsReceived,proto3" json:"total_packets_received,omitempty"`
	PathStats            []*PathDataStats       `protobuf:"bytes,5,rep,name=path_stats,json=pathStats,proto3" json:"path_stats,omitempty"`
	AggregationTimestamp uint64                 `protobuf:"varint,6,opt,name=aggregation_timestamp,json=aggregationTimestamp,proto3" json:"aggregation_timestamp,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AggregatedDataStats) Reset() {
	*x = AggregatedDataStats{}
	mi := &file_proto_data_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregatedDataStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedDataStats) ProtoMessage() {}

func (x *AggregatedDataStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedDataStats.ProtoReflect.Descriptor instead.
func (*AggregatedDataStats) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{19}
}

func (x *AggregatedDataStats) GetTotalBytesSent() uint64 {
	if x != nil {
		return x.TotalBytesSent
	}
	return 0
}

func (x *AggregatedDataStats) GetTotalBytesReceived() uint64 {
	if x != nil {
		return x.TotalBytesReceived
	}
	return 0
}

func (x *AggregatedDataStats) GetTotalPacketsSent() uint64 {
	if x != nil {
		return x.TotalPacketsSent
	}
	return 0
}

func (x *AggregatedDataStats) GetTotalPacketsReceived() uint64 {
	if x != nil {
		return x.TotalPacketsReceived
	}
	return 0
}

func (x *AggregatedDataStats) GetPathStats() []*PathDataStats {
	if x != nil {
		return x.PathStats
	}
	return nil
}

func (x *AggregatedDataStats) GetAggregationTimestamp() uint64 {
	if x != nil {
		return x.AggregationTimestamp
	}
	return 0
}

// Per-path data statistics
type PathDataStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PathId          string                 `protobuf:"bytes,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	BytesSent       uint64                 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesReceived   uint64                 `protobuf:"varint,3,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	PacketsSent     uint64                 `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	PacketsReceived uint64                 `protobuf:"varint,5,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	Retransmissions uint64                 `protobuf:"varint,6,opt,name=retransmissions,proto3" json:"retransmissions,omitempty"`
	LossRate        float32                `protobuf:"fixed32,7,opt,name=loss_rate,json=lossRate,proto3" json:"loss_rate,omitempty"`
	RttMs           uint64                 `protobuf:"varint,8,opt,name=rtt_ms,json=rttMs,proto3" json:"rtt_ms,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PathDataStats) Reset() {
	*x = PathDataStats{}
	mi := &file_proto_data_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathDataStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathDataStats) ProtoMessage() {}

func (x *PathDataStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathDataStats.ProtoReflect.Descriptor instead.
func (*PathDataStats) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{20}
}

func (x *PathDataStats) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *PathDataStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *PathDataStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *PathDataStats) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *PathDataStats) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *PathDataStats) GetRetransmissions() uint64 {
	if x != nil {
		return x.Retransmissions
	}
	return 0
}

func (x *PathDataStats) GetLossRate() float32 {
	if x != nil {
		return x.LossRate
	}
	return 0
}

func (x *PathDataStats) GetRttMs() uint64 {
	if x != nil {
		return x.RttMs
	}
	return 0
}

var File_proto_data_proto protoreflect.FileDescriptor

const file_proto_data_proto_rawDesc = "" +
	"\n" +
	"\x10proto/data.proto\x12\tkwik.data\"\x84\x02\n" +
	"\tDataFrame\x12\x19\n" +
	"\bframe_id\x18\x01 \x01(\x04R\aframeId\x12*\n" +
	"\x11logical_stream_id\x18\x02 \x01(\x04R\x0flogicalStreamId\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x10\n" +
	"\x03fin\x18\x05 \x01(\bR\x03fin\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x04R\ttimestamp\x12\x17\n" +
	"\apath_id\x18\a \x01(\tR\x06pathId\x12\x1f\n" +
	"\vdata_length\x18\b \x01(\rR\n" +
	"dataLength\x12\x1a\n" +
	"\bchecksum\x18\t \x01(\rR\bchecksum\"\xe1\x01\n" +
	"\n" +
	"DataPacket\x12\x1b\n" +
	"\tpacket_id\x18\x01 \x01(\x04R\bpacketId\x12\x17\n" +
	"\apath_id\x18\x02 \x01(\tR\x06pathId\x12,\n" +
	"\x06frames\x18\x03 \x03(\v2\x14.kwik.data.DataFrameR\x06frames\x12\x1a\n" +
	"\bchecksum\x18\x04 \x01(\rR\bchecksum\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x04R\ttimestamp\x125\n" +
	"\bmetadata\x18\x06 \x01(\v2\x19.kwik.data.PacketMetadataR\bmetadata\"\xdf\x01\n" +
	"\x0ePacketMetadata\x12\x1d\n" +
	"\n" +
	"total_size\x18\x01 \x01(\rR\ttotalSize\x12\x1f\n" +
	"\vframe_count\x18\x02 \x01(\rR\n" +
	"frameCount\x12<\n" +
	"\vcompression\x18\x03 \x01(\x0e2\x1a.kwik.data.CompressionTypeR\vcompression\x12'\n" +
	"\x0fsequence_number\x18\x04 \x01(\rR\x0esequenceNumber\x12&\n" +
	"\x0eretransmission\x18\x05 \x01(\bR\x0eretransmission\"\xf8\x01\n" +
	"\bAckFrame\x12\x15\n" +
	"\x06ack_id\x18\x01 \x01(\x04R\x05ackId\x12(\n" +
	"\x10acked_packet_ids\x18\x02 \x03(\x04R\x0eackedPacketIds\x12\x17\n" +
	"\apath_id\x18\x03 \x01(\tR\x06pathId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x122\n" +
	"\n" +
	"ack_ranges\x18\x05 \x03(\v2\x13.kwik.data.AckRangeR\tackRanges\x12#\n" +
	"\rlargest_acked\x18\x06 \x01(\x04R\flargestAcked\x12\x1b\n" +
	"\tack_delay\x18\a \x01(\x04R\backDelay\"2\n" +
	"\bAckRange\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x04R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x04R\x03end\"\x9c\x01\n" +
	"\x16StreamFlowControlFrame\x12*\n" +
	"\x11logical_stream_id\x18\x01 \x01(\x04R\x0flogicalStreamId\x12&\n" +
	"\x0fmax_stream_data\x18\x02 \x01(\x04R\rmaxStreamData\x12.\n" +
	"\x13stream_data_blocked\x18\x03 \x01(\x04R\x11streamDataBlocked\"s\n" +
	"\x1aConnectionFlowControlFrame\x12\x17\n" +
	"\apath_id\x18\x01 \x01(\tR\x06pathId\x12\x19\n" +
	"\bmax_data\x18\x02 \x01(\x04R\amaxData\x12!\n" +
	"\fdata_blocked\x18\x03 \x01(\x04R\vdataBlocked\"\xab\x01\n" +
	"\x10StreamResetFrame\x12*\n" +
	"\x11logical_stream_id\x18\x01 \x01(\x04R\x0flogicalStreamId\x124\n" +
	"\x16application_error_code\x18\x02 \x01(\x04R\x14applicationErrorCode\x12\x1d\n" +
	"\n" +
	"final_size\x18\x03 \x01(\x04R\tfinalSize\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\"\x8c\x01\n" +
	"\x10StopSendingFrame\x12*\n" +
	"\x11logical_stream_id\x18\x01 \x01(\x04R\x0flogicalStreamId\x124\n" +
	"\x16application_error_code\x18\x02 \x01(\x04R\x14applicationErrorCode\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"F\n" +
	"\vCryptoFrame\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\x04R\x06offset\x12\x1f\n" +
	"\vcrypto_data\x18\x02 \x01(\fR\n" +
	"cryptoData\"\xc0\x01\n" +
	"\x14NewConnectionIdFrame\x12'\n" +
	"\x0fsequence_number\x18\x01 \x01(\x04R\x0esequenceNumber\x12&\n" +
	"\x0fretire_prior_to\x18\x02 \x01(\x04R\rretirePriorTo\x12#\n" +
	"\rconnection_id\x18\x03 \x01(\fR\fconnectionId\x122\n" +
	"\x15stateless_reset_token\x18\x04 \x01(\fR\x13statelessResetToken\"B\n" +
	"\x17RetireConnectionIdFrame\x12'\n" +
	"\x0fsequence_number\x18\x01 \x01(\x04R\x0esequenceNumber\"T\n" +
	"\x12PathChallengeFrame\x12%\n" +
	"\x0echallenge_data\x18\x01 \x01(\fR\rchallengeData\x12\x17\n" +
	"\apath_id\x18\x02 \x01(\tR\x06pathId\"Q\n" +
	"\x11PathResponseFrame\x12#\n" +
	"\rresponse_data\x18\x01 \x01(\fR\fresponseData\x12\x17\n" +
	"\apath_id\x18\x02 \x01(\tR\x06pathId\"\xa6\x01\n" +
	"\x14ConnectionCloseFrame\x12\x1d\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x04R\terrorCode\x12\x1d\n" +
	"\n" +
	"frame_type\x18\x02 \x01(\x04R\tframeType\x12#\n" +
	"\rreason_phrase\x18\x03 \x01(\tR\freasonPhrase\x12+\n" +
	"\x11application_error\x18\x04 \x01(\bR\x10applicationError\"5\n" +
	"\fPaddingFrame\x12%\n" +
	"\x0epadding_length\x18\x01 \x01(\rR\rpaddingLength\"F\n" +
	"\tPingFrame\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12\x1b\n" +
	"\tping_data\x18\x02 \x01(\fR\bpingData\"\x93\x01\n" +
	"\x12DataFrameContainer\x12,\n" +
	"\x04type\x18\x01 \x01(\x0e2\x18.kwik.data.DataFrameTypeR\x04type\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x04R\ttimestamp\x12\x17\n" +
	"\apath_id\x18\x04 \x01(\tR\x06pathId\"\xd9\x02\n" +
	"\vStreamState\x12*\n" +
	"\x11logical_stream_id\x18\x01 \x01(\x04R\x0flogicalStreamId\x120\n" +
	"\x05state\x18\x02 \x01(\x0e2\x1a.kwik.data.StreamStateTypeR\x05state\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x03 \x01(\x04R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\x04 \x01(\x04R\rbytesReceived\x12/\n" +
	"\x14max_stream_data_sent\x18\x05 \x01(\x04R\x11maxStreamDataSent\x127\n" +
	"\x18max_stream_data_received\x18\x06 \x01(\x04R\x15maxStreamDataReceived\x12\x19\n" +
	"\bfin_sent\x18\a \x01(\bR\afinSent\x12!\n" +
	"\ffin_received\x18\b \x01(\bR\vfinReceived\"\xc3\x02\n" +
	"\x13AggregatedDataStats\x12(\n" +
	"\x10total_bytes_sent\x18\x01 \x01(\x04R\x0etotalBytesSent\x120\n" +
	"\x14total_bytes_received\x18\x02 \x01(\x04R\x12totalBytesReceived\x12,\n" +
	"\x12total_packets_sent\x18\x03 \x01(\x04R\x10totalPacketsSent\x124\n" +
	"\x16total_packets_received\x18\x04 \x01(\x04R\x14totalPacketsReceived\x127\n" +
	"\n" +
	"path_stats\x18\x05 \x03(\v2\x18.kwik.data.PathDataStatsR\tpathStats\x123\n" +
	"\x15aggregation_timestamp\x18\x06 \x01(\x04R\x14aggregationTimestamp\"\x9a\x02\n" +
	"\rPathDataStats\x12\x17\n" +
	"\apath_id\x18\x01 \x01(\tR\x06pathId\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x02 \x01(\x04R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\x03 \x01(\x04R\rbytesReceived\x12!\n" +
	"\fpackets_sent\x18\x04 \x01(\x04R\vpacketsSent\x12)\n" +
	"\x10packets_received\x18\x05 \x01(\x04R\x0fpacketsReceived\x12(\n" +
	"\x0fretransmissions\x18\x06 \x01(\x04R\x0fretransmissions\x12\x1b\n" +
	"\tloss_rate\x18\a \x01(\x02R\blossRate\x12\x15\n" +
	"\x06rtt_ms\x18\b \x01(\x04R\x05rttMs*h\n" +
	"\x0fCompressionType\x12\x14\n" +
	"\x10COMPRESSION_NONE\x10\x00\x12\x14\n" +
	"\x10COMPRESSION_GZIP\x10\x01\x12\x13\n" +
	"\x0fCOMPRESSION_LZ4\x10\x02\x12\x14\n" +
	"\x10COMPRESSION_ZSTD\x10\x03*\xa7\x03\n" +
	"\rDataFrameType\x12\x13\n" +
	"\x0fDATA_FRAME_DATA\x10\x00\x12\x12\n" +
	"\x0eDATA_FRAME_ACK\x10\x01\x12\"\n" +
	"\x1eDATA_FRAME_STREAM_FLOW_CONTROL\x10\x02\x12&\n" +
	"\"DATA_FRAME_CONNECTION_FLOW_CONTROL\x10\x03\x12\x1b\n" +
	"\x17DATA_FRAME_STREAM_RESET\x10\x04\x12\x1b\n" +
	"\x17DATA_FRAME_STOP_SENDING\x10\x05\x12\x15\n" +
	"\x11DATA_FRAME_CRYPTO\x10\x06\x12 \n" +
	"\x1cDATA_FRAME_NEW_CONNECTION_ID\x10\a\x12#\n" +
	"\x1fDATA_FRAME_RETIRE_CONNECTION_ID\x10\b\x12\x1d\n" +
	"\x19DATA_FRAME_PATH_CHALLENGE\x10\t\x12\x1c\n" +
	"\x18DATA_FRAME_PATH_RESPONSE\x10\n" +
	"\x12\x1f\n" +
	"\x1bDATA_FRAME_CONNECTION_CLOSE\x10\v\x12\x16\n" +
	"\x12DATA_FRAME_PADDING\x10\f\x12\x13\n" +
	"\x0fDATA_FRAME_PING\x10\r*\xd8\x01\n" +
	"\x0fStreamStateType\x12\x14\n" +
	"\x10DATA_STREAM_IDLE\x10\x00\x12\x14\n" +
	"\x10DATA_STREAM_OPEN\x10\x01\x12!\n" +
	"\x1dDATA_STREAM_HALF_CLOSED_LOCAL\x10\x02\x12\"\n" +
	"\x1eDATA_STREAM_HALF_CLOSED_REMOTE\x10\x03\x12\x16\n" +
	"\x12DATA_STREAM_CLOSED\x10\x04\x12\x1a\n" +
	"\x16DATA_STREAM_RESET_SENT\x10\x05\x12\x1e\n" +
	"\x1aDATA_STREAM_RESET_RECEIVED\x10\x06B\x11Z\x0fkwik/proto/datab\x06proto3"

var (
	file_proto_data_proto_rawDescOnce sync.Once
	file_proto_data_proto_rawDescData []byte
)

func file_proto_data_proto_rawDescGZIP() []byte {
	file_proto_data_proto_rawDescOnce.Do(func() {
		file_proto_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_data_proto_rawDesc), len(file_proto_data_proto_rawDesc)))
	})
	return file_proto_data_proto_rawDescData
}

var file_proto_data_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_data_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_data_proto_goTypes = []any{
	(CompressionType)(0),               // 0: kwik.data.CompressionType
	(DataFrameType)(0),                 // 1: kwik.data.DataFrameType
	(StreamStateType)(0),               // 2: kwik.data.StreamStateType
	(*DataFrame)(nil),                  // 3: kwik.data.DataFrame
	(*DataPacket)(nil),                 // 4: kwik.data.DataPacket
	(*PacketMetadata)(nil),             // 5: kwik.data.PacketMetadata
	(*AckFrame)(nil),                   // 6: kwik.data.AckFrame
	(*AckRange)(nil),                   // 7: kwik.data.AckRange
	(*StreamFlowControlFrame)(nil),     // 8: kwik.data.StreamFlowControlFrame
	(*ConnectionFlowControlFrame)(nil), // 9: kwik.data.ConnectionFlowControlFrame
	(*StreamResetFrame)(nil),           // 10: kwik.data.StreamResetFrame
	(*StopSendingFrame)(nil),           // 11: kwik.data.StopSendingFrame
	(*CryptoFrame)(nil),                // 12: kwik.data.CryptoFrame
	(*NewConnectionIdFrame)(nil),       // 13: kwik.data.NewConnectionIdFrame
	(*RetireConnectionIdFrame)(nil),    // 14: kwik.data.RetireConnectionIdFrame
	(*PathChallengeFrame)(nil),         // 15: kwik.data.PathChallengeFrame
	(*PathResponseFrame)(nil),          // 16: kwik.data.PathResponseFrame
	(*ConnectionCloseFrame)(nil),       // 17: kwik.data.ConnectionCloseFrame
	(*PaddingFrame)(nil),               // 18: kwik.data.PaddingFrame
	(*PingFrame)(nil),                  // 19: kwik.data.PingFrame
	(*DataFrameContainer)(nil),         // 20: kwik.data.DataFrameContainer
	(*StreamState)(nil),                // 21: kwik.data.StreamState
	(*AggregatedDataStats)(nil),        // 22: kwik.data.AggregatedDataStats
	(*PathDataStats)(nil),              // 23: kwik.data.PathDataStats
}
var file_proto_data_proto_depIdxs = []int32{
	3,  // 0: kwik.data.DataPacket.frames:type_name -> kwik.data.DataFrame
	5,  // 1: kwik.data.DataPacket.metadata:type_name -> kwik.data.PacketMetadata
	0,  // 2: kwik.data.PacketMetadata.compression:type_name -> kwik.data.CompressionType
	7,  // 3: kwik.data.AckFrame.ack_ranges:type_name -> kwik.data.AckRange
	1,  // 4: kwik.data.DataFrameContainer.type:type_name -> kwik.data.DataFrameType
	2,  // 5: kwik.data.StreamState.state:type_name -> kwik.data.StreamStateType
	23, // 6: kwik.data.AggregatedDataStats.path_stats:type_name -> kwik.data.PathDataStats
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_data_proto_init() }
func file_proto_data_proto_init() {
	if File_proto_data_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_data_proto_rawDesc), len(file_proto_data_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_data_proto_goTypes,
		DependencyIndexes: file_proto_data_proto_depIdxs,
		EnumInfos:         file_proto_data_proto_enumTypes,
		MessageInfos:      file_proto_data_proto_msgTypes,
	}.Build()
	File_proto_data_proto = out.File
	file_proto_data_proto_goTypes = nil
	file_proto_data_proto_depIdxs = nil
}
