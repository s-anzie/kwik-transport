// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.30.2
// source: proto/secondary_stream/secondary_stream.proto

package secondary_stream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error severity levels
type ErrorSeverity int32

const (
	ErrorSeverity_SEVERITY_INFO     ErrorSeverity = 0
	ErrorSeverity_SEVERITY_WARNING  ErrorSeverity = 1
	ErrorSeverity_SEVERITY_ERROR    ErrorSeverity = 2
	ErrorSeverity_SEVERITY_CRITICAL ErrorSeverity = 3
	ErrorSeverity_SEVERITY_FATAL    ErrorSeverity = 4
)

// Enum value maps for ErrorSeverity.
var (
	ErrorSeverity_name = map[int32]string{
		0: "SEVERITY_INFO",
		1: "SEVERITY_WARNING",
		2: "SEVERITY_ERROR",
		3: "SEVERITY_CRITICAL",
		4: "SEVERITY_FATAL",
	}
	ErrorSeverity_value = map[string]int32{
		"SEVERITY_INFO":     0,
		"SEVERITY_WARNING":  1,
		"SEVERITY_ERROR":    2,
		"SEVERITY_CRITICAL": 3,
		"SEVERITY_FATAL":    4,
	}
)

func (x ErrorSeverity) Enum() *ErrorSeverity {
	p := new(ErrorSeverity)
	*p = x
	return p
}

func (x ErrorSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_secondary_stream_secondary_stream_proto_enumTypes[0].Descriptor()
}

func (ErrorSeverity) Type() protoreflect.EnumType {
	return &file_proto_secondary_stream_secondary_stream_proto_enumTypes[0]
}

func (x ErrorSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorSeverity.Descriptor instead.
func (ErrorSeverity) EnumDescriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{0}
}

// Secondary stream open message - sent when a secondary server opens a stream
type SecondaryStreamOpen struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SecondaryStreamId  uint64                 `protobuf:"varint,1,opt,name=secondary_stream_id,json=secondaryStreamId,proto3" json:"secondary_stream_id,omitempty"`                             // ID of the secondary stream on QUIC connection
	TargetKwikStreamId uint64                 `protobuf:"varint,2,opt,name=target_kwik_stream_id,json=targetKwikStreamId,proto3" json:"target_kwik_stream_id,omitempty"`                        // Target KWIK logical stream ID
	InitialOffset      uint64                 `protobuf:"varint,3,opt,name=initial_offset,json=initialOffset,proto3" json:"initial_offset,omitempty"`                                           // Initial offset in the KWIK stream
	SourcePathId       string                 `protobuf:"bytes,4,opt,name=source_path_id,json=sourcePathId,proto3" json:"source_path_id,omitempty"`                                             // Path ID of the secondary server
	Timestamp          uint64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                        // Timestamp when stream was opened
	Metadata           map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional stream metadata
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SecondaryStreamOpen) Reset() {
	*x = SecondaryStreamOpen{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryStreamOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryStreamOpen) ProtoMessage() {}

func (x *SecondaryStreamOpen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryStreamOpen.ProtoReflect.Descriptor instead.
func (*SecondaryStreamOpen) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{0}
}

func (x *SecondaryStreamOpen) GetSecondaryStreamId() uint64 {
	if x != nil {
		return x.SecondaryStreamId
	}
	return 0
}

func (x *SecondaryStreamOpen) GetTargetKwikStreamId() uint64 {
	if x != nil {
		return x.TargetKwikStreamId
	}
	return 0
}

func (x *SecondaryStreamOpen) GetInitialOffset() uint64 {
	if x != nil {
		return x.InitialOffset
	}
	return 0
}

func (x *SecondaryStreamOpen) GetSourcePathId() string {
	if x != nil {
		return x.SourcePathId
	}
	return ""
}

func (x *SecondaryStreamOpen) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecondaryStreamOpen) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Secondary stream data message - carries data from secondary stream to KWIK stream
type SecondaryStreamData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SecondaryStreamId uint64                 `protobuf:"varint,1,opt,name=secondary_stream_id,json=secondaryStreamId,proto3" json:"secondary_stream_id,omitempty"` // ID of the secondary stream
	KwikStreamId      uint64                 `protobuf:"varint,2,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`                // Target KWIK logical stream ID
	Offset            uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                                                  // Offset in the KWIK stream where data should be placed
	Data              []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                                       // Application data payload
	Fin               bool                   `protobuf:"varint,5,opt,name=fin,proto3" json:"fin,omitempty"`                                                        // Whether this is the final frame for this secondary stream
	Timestamp         uint64                 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                            // Timestamp when data was sent
	SourcePathId      string                 `protobuf:"bytes,7,opt,name=source_path_id,json=sourcePathId,proto3" json:"source_path_id,omitempty"`                 // Path ID of the secondary server
	DataLength        uint32                 `protobuf:"varint,8,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`                        // Length of data payload
	Checksum          uint32                 `protobuf:"varint,9,opt,name=checksum,proto3" json:"checksum,omitempty"`                                              // Data checksum for integrity verification
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SecondaryStreamData) Reset() {
	*x = SecondaryStreamData{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryStreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryStreamData) ProtoMessage() {}

func (x *SecondaryStreamData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryStreamData.ProtoReflect.Descriptor instead.
func (*SecondaryStreamData) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{1}
}

func (x *SecondaryStreamData) GetSecondaryStreamId() uint64 {
	if x != nil {
		return x.SecondaryStreamId
	}
	return 0
}

func (x *SecondaryStreamData) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *SecondaryStreamData) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SecondaryStreamData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SecondaryStreamData) GetFin() bool {
	if x != nil {
		return x.Fin
	}
	return false
}

func (x *SecondaryStreamData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecondaryStreamData) GetSourcePathId() string {
	if x != nil {
		return x.SourcePathId
	}
	return ""
}

func (x *SecondaryStreamData) GetDataLength() uint32 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *SecondaryStreamData) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

// Secondary stream close message - sent when a secondary server closes a stream
type SecondaryStreamClose struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SecondaryStreamId uint64                 `protobuf:"varint,1,opt,name=secondary_stream_id,json=secondaryStreamId,proto3" json:"secondary_stream_id,omitempty"` // ID of the secondary stream being closed
	KwikStreamId      uint64                 `protobuf:"varint,2,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`                // Associated KWIK logical stream ID
	Reason            string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                                                   // Reason for closing the stream
	FinalOffset       uint64                 `protobuf:"varint,4,opt,name=final_offset,json=finalOffset,proto3" json:"final_offset,omitempty"`                     // Final offset written to the KWIK stream
	Timestamp         uint64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                            // Timestamp when stream was closed
	SourcePathId      string                 `protobuf:"bytes,6,opt,name=source_path_id,json=sourcePathId,proto3" json:"source_path_id,omitempty"`                 // Path ID of the secondary server
	ErrorClose        bool                   `protobuf:"varint,7,opt,name=error_close,json=errorClose,proto3" json:"error_close,omitempty"`                        // Whether this was closed due to an error
	ErrorCode         uint64                 `protobuf:"varint,8,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`                           // Error code if error_close is true
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SecondaryStreamClose) Reset() {
	*x = SecondaryStreamClose{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryStreamClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryStreamClose) ProtoMessage() {}

func (x *SecondaryStreamClose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryStreamClose.ProtoReflect.Descriptor instead.
func (*SecondaryStreamClose) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{2}
}

func (x *SecondaryStreamClose) GetSecondaryStreamId() uint64 {
	if x != nil {
		return x.SecondaryStreamId
	}
	return 0
}

func (x *SecondaryStreamClose) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *SecondaryStreamClose) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SecondaryStreamClose) GetFinalOffset() uint64 {
	if x != nil {
		return x.FinalOffset
	}
	return 0
}

func (x *SecondaryStreamClose) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecondaryStreamClose) GetSourcePathId() string {
	if x != nil {
		return x.SourcePathId
	}
	return ""
}

func (x *SecondaryStreamClose) GetErrorClose() bool {
	if x != nil {
		return x.ErrorClose
	}
	return false
}

func (x *SecondaryStreamClose) GetErrorCode() uint64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// Offset synchronization request - request current offset state for a KWIK stream
type OffsetSyncRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	KwikStreamId     uint64                 `protobuf:"varint,1,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`            // KWIK stream ID to synchronize
	CurrentOffset    uint64                 `protobuf:"varint,2,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`           // Current offset known by the requesting server
	RequestingPathId string                 `protobuf:"bytes,3,opt,name=requesting_path_id,json=requestingPathId,proto3" json:"requesting_path_id,omitempty"` // Path ID of the requesting server
	Timestamp        uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                        // Request timestamp
	SyncReason       string                 `protobuf:"bytes,5,opt,name=sync_reason,json=syncReason,proto3" json:"sync_reason,omitempty"`                     // Reason for synchronization request
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OffsetSyncRequest) Reset() {
	*x = OffsetSyncRequest{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffsetSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetSyncRequest) ProtoMessage() {}

func (x *OffsetSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetSyncRequest.ProtoReflect.Descriptor instead.
func (*OffsetSyncRequest) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{3}
}

func (x *OffsetSyncRequest) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *OffsetSyncRequest) GetCurrentOffset() uint64 {
	if x != nil {
		return x.CurrentOffset
	}
	return 0
}

func (x *OffsetSyncRequest) GetRequestingPathId() string {
	if x != nil {
		return x.RequestingPathId
	}
	return ""
}

func (x *OffsetSyncRequest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OffsetSyncRequest) GetSyncReason() string {
	if x != nil {
		return x.SyncReason
	}
	return ""
}

// Offset synchronization response - response with current offset state
type OffsetSyncResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	KwikStreamId        uint64                 `protobuf:"varint,1,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`                     // KWIK stream ID being synchronized
	ExpectedOffset      uint64                 `protobuf:"varint,2,opt,name=expected_offset,json=expectedOffset,proto3" json:"expected_offset,omitempty"`                 // Expected next offset for this stream
	SyncRequired        bool                   `protobuf:"varint,3,opt,name=sync_required,json=syncRequired,proto3" json:"sync_required,omitempty"`                       // Whether synchronization is required
	Timestamp           uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                 // Response timestamp
	PendingRanges       []*OffsetRange         `protobuf:"bytes,5,rep,name=pending_ranges,json=pendingRanges,proto3" json:"pending_ranges,omitempty"`                     // Ranges of offsets with pending data
	AuthoritativePathId string                 `protobuf:"bytes,6,opt,name=authoritative_path_id,json=authoritativePathId,proto3" json:"authoritative_path_id,omitempty"` // Path ID of the authoritative source for offsets
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OffsetSyncResponse) Reset() {
	*x = OffsetSyncResponse{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffsetSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetSyncResponse) ProtoMessage() {}

func (x *OffsetSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetSyncResponse.ProtoReflect.Descriptor instead.
func (*OffsetSyncResponse) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{4}
}

func (x *OffsetSyncResponse) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *OffsetSyncResponse) GetExpectedOffset() uint64 {
	if x != nil {
		return x.ExpectedOffset
	}
	return 0
}

func (x *OffsetSyncResponse) GetSyncRequired() bool {
	if x != nil {
		return x.SyncRequired
	}
	return false
}

func (x *OffsetSyncResponse) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OffsetSyncResponse) GetPendingRanges() []*OffsetRange {
	if x != nil {
		return x.PendingRanges
	}
	return nil
}

func (x *OffsetSyncResponse) GetAuthoritativePathId() string {
	if x != nil {
		return x.AuthoritativePathId
	}
	return ""
}

// Offset range - represents a range of offsets
type OffsetRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartOffset   uint64                 `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`     // Start of the offset range (inclusive)
	EndOffset     uint64                 `protobuf:"varint,2,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`           // End of the offset range (inclusive)
	SourcePathId  string                 `protobuf:"bytes,3,opt,name=source_path_id,json=sourcePathId,proto3" json:"source_path_id,omitempty"` // Path ID that owns this range
	Timestamp     uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                            // When this range was established
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OffsetRange) Reset() {
	*x = OffsetRange{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffsetRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetRange) ProtoMessage() {}

func (x *OffsetRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetRange.ProtoReflect.Descriptor instead.
func (*OffsetRange) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{5}
}

func (x *OffsetRange) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *OffsetRange) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *OffsetRange) GetSourcePathId() string {
	if x != nil {
		return x.SourcePathId
	}
	return ""
}

func (x *OffsetRange) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Secondary stream error - error information for secondary stream operations
type SecondaryStreamError struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SecondaryStreamId uint64                 `protobuf:"varint,1,opt,name=secondary_stream_id,json=secondaryStreamId,proto3" json:"secondary_stream_id,omitempty"`                           // Secondary stream ID where error occurred
	KwikStreamId      uint64                 `protobuf:"varint,2,opt,name=kwik_stream_id,json=kwikStreamId,proto3" json:"kwik_stream_id,omitempty"`                                          // Associated KWIK stream ID
	ErrorCode         string                 `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`                                                      // Structured error code
	ErrorMessage      string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                             // Human-readable error message
	Timestamp         uint64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                      // Error timestamp
	SourcePathId      string                 `protobuf:"bytes,6,opt,name=source_path_id,json=sourcePathId,proto3" json:"source_path_id,omitempty"`                                           // Path ID where error occurred
	Severity          ErrorSeverity          `protobuf:"varint,7,opt,name=severity,proto3,enum=kwik.secondary.ErrorSeverity" json:"severity,omitempty"`                                      // Error severity level
	Context           map[string]string      `protobuf:"bytes,8,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional error context
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SecondaryStreamError) Reset() {
	*x = SecondaryStreamError{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryStreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryStreamError) ProtoMessage() {}

func (x *SecondaryStreamError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryStreamError.ProtoReflect.Descriptor instead.
func (*SecondaryStreamError) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{6}
}

func (x *SecondaryStreamError) GetSecondaryStreamId() uint64 {
	if x != nil {
		return x.SecondaryStreamId
	}
	return 0
}

func (x *SecondaryStreamError) GetKwikStreamId() uint64 {
	if x != nil {
		return x.KwikStreamId
	}
	return 0
}

func (x *SecondaryStreamError) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *SecondaryStreamError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SecondaryStreamError) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecondaryStreamError) GetSourcePathId() string {
	if x != nil {
		return x.SourcePathId
	}
	return ""
}

func (x *SecondaryStreamError) GetSeverity() ErrorSeverity {
	if x != nil {
		return x.Severity
	}
	return ErrorSeverity_SEVERITY_INFO
}

func (x *SecondaryStreamError) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

// Secondary stream statistics - performance and usage statistics
type SecondaryStreamStats struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PathId                string                 `protobuf:"bytes,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`                                                 // Path ID these stats apply to
	ActiveStreams         uint64                 `protobuf:"varint,2,opt,name=active_streams,json=activeStreams,proto3" json:"active_streams,omitempty"`                           // Number of currently active secondary streams
	TotalStreamsCreated   uint64                 `protobuf:"varint,3,opt,name=total_streams_created,json=totalStreamsCreated,proto3" json:"total_streams_created,omitempty"`       // Total secondary streams created
	TotalStreamsClosed    uint64                 `protobuf:"varint,4,opt,name=total_streams_closed,json=totalStreamsClosed,proto3" json:"total_streams_closed,omitempty"`          // Total secondary streams closed
	TotalBytesSent        uint64                 `protobuf:"varint,5,opt,name=total_bytes_sent,json=totalBytesSent,proto3" json:"total_bytes_sent,omitempty"`                      // Total bytes sent through secondary streams
	TotalBytesReceived    uint64                 `protobuf:"varint,6,opt,name=total_bytes_received,json=totalBytesReceived,proto3" json:"total_bytes_received,omitempty"`          // Total bytes received from secondary streams
	AggregationEvents     uint64                 `protobuf:"varint,7,opt,name=aggregation_events,json=aggregationEvents,proto3" json:"aggregation_events,omitempty"`               // Number of data aggregation events
	OffsetConflicts       uint64                 `protobuf:"varint,8,opt,name=offset_conflicts,json=offsetConflicts,proto3" json:"offset_conflicts,omitempty"`                     // Number of offset conflicts resolved
	SyncRequests          uint64                 `protobuf:"varint,9,opt,name=sync_requests,json=syncRequests,proto3" json:"sync_requests,omitempty"`                              // Number of offset sync requests sent
	SyncResponses         uint64                 `protobuf:"varint,10,opt,name=sync_responses,json=syncResponses,proto3" json:"sync_responses,omitempty"`                          // Number of offset sync responses received
	AggregationEfficiency float32                `protobuf:"fixed32,11,opt,name=aggregation_efficiency,json=aggregationEfficiency,proto3" json:"aggregation_efficiency,omitempty"` // Efficiency of data aggregation (0.0 to 1.0)
	LastActivity          uint64                 `protobuf:"varint,12,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`                             // Timestamp of last activity
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SecondaryStreamStats) Reset() {
	*x = SecondaryStreamStats{}
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryStreamStats) ProtoMessage() {}

func (x *SecondaryStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_secondary_stream_secondary_stream_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryStreamStats.ProtoReflect.Descriptor instead.
func (*SecondaryStreamStats) Descriptor() ([]byte, []int) {
	return file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP(), []int{7}
}

func (x *SecondaryStreamStats) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *SecondaryStreamStats) GetActiveStreams() uint64 {
	if x != nil {
		return x.ActiveStreams
	}
	return 0
}

func (x *SecondaryStreamStats) GetTotalStreamsCreated() uint64 {
	if x != nil {
		return x.TotalStreamsCreated
	}
	return 0
}

func (x *SecondaryStreamStats) GetTotalStreamsClosed() uint64 {
	if x != nil {
		return x.TotalStreamsClosed
	}
	return 0
}

func (x *SecondaryStreamStats) GetTotalBytesSent() uint64 {
	if x != nil {
		return x.TotalBytesSent
	}
	return 0
}

func (x *SecondaryStreamStats) GetTotalBytesReceived() uint64 {
	if x != nil {
		return x.TotalBytesReceived
	}
	return 0
}

func (x *SecondaryStreamStats) GetAggregationEvents() uint64 {
	if x != nil {
		return x.AggregationEvents
	}
	return 0
}

func (x *SecondaryStreamStats) GetOffsetConflicts() uint64 {
	if x != nil {
		return x.OffsetConflicts
	}
	return 0
}

func (x *SecondaryStreamStats) GetSyncRequests() uint64 {
	if x != nil {
		return x.SyncRequests
	}
	return 0
}

func (x *SecondaryStreamStats) GetSyncResponses() uint64 {
	if x != nil {
		return x.SyncResponses
	}
	return 0
}

func (x *SecondaryStreamStats) GetAggregationEfficiency() float32 {
	if x != nil {
		return x.AggregationEfficiency
	}
	return 0
}

func (x *SecondaryStreamStats) GetLastActivity() uint64 {
	if x != nil {
		return x.LastActivity
	}
	return 0
}

var File_proto_secondary_stream_secondary_stream_proto protoreflect.FileDescriptor

const file_proto_secondary_stream_secondary_stream_proto_rawDesc = "" +
	"\n" +
	"-proto/secondary_stream/secondary_stream.proto\x12\x0ekwik.secondary\"\xef\x02\n" +
	"\x13SecondaryStreamOpen\x12.\n" +
	"\x13secondary_stream_id\x18\x01 \x01(\x04R\x11secondaryStreamId\x121\n" +
	"\x15target_kwik_stream_id\x18\x02 \x01(\x04R\x12targetKwikStreamId\x12%\n" +
	"\x0einitial_offset\x18\x03 \x01(\x04R\rinitialOffset\x12$\n" +
	"\x0esource_path_id\x18\x04 \x01(\tR\fsourcePathId\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x04R\ttimestamp\x12M\n" +
	"\bmetadata\x18\x06 \x03(\v21.kwik.secondary.SecondaryStreamOpen.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xaa\x02\n" +
	"\x13SecondaryStreamData\x12.\n" +
	"\x13secondary_stream_id\x18\x01 \x01(\x04R\x11secondaryStreamId\x12$\n" +
	"\x0ekwik_stream_id\x18\x02 \x01(\x04R\fkwikStreamId\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x10\n" +
	"\x03fin\x18\x05 \x01(\bR\x03fin\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x04R\ttimestamp\x12$\n" +
	"\x0esource_path_id\x18\a \x01(\tR\fsourcePathId\x12\x1f\n" +
	"\vdata_length\x18\b \x01(\rR\n" +
	"dataLength\x12\x1a\n" +
	"\bchecksum\x18\t \x01(\rR\bchecksum\"\xab\x02\n" +
	"\x14SecondaryStreamClose\x12.\n" +
	"\x13secondary_stream_id\x18\x01 \x01(\x04R\x11secondaryStreamId\x12$\n" +
	"\x0ekwik_stream_id\x18\x02 \x01(\x04R\fkwikStreamId\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\x12!\n" +
	"\ffinal_offset\x18\x04 \x01(\x04R\vfinalOffset\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x04R\ttimestamp\x12$\n" +
	"\x0esource_path_id\x18\x06 \x01(\tR\fsourcePathId\x12\x1f\n" +
	"\verror_close\x18\a \x01(\bR\n" +
	"errorClose\x12\x1d\n" +
	"\n" +
	"error_code\x18\b \x01(\x04R\terrorCode\"\xcd\x01\n" +
	"\x11OffsetSyncRequest\x12$\n" +
	"\x0ekwik_stream_id\x18\x01 \x01(\x04R\fkwikStreamId\x12%\n" +
	"\x0ecurrent_offset\x18\x02 \x01(\x04R\rcurrentOffset\x12,\n" +
	"\x12requesting_path_id\x18\x03 \x01(\tR\x10requestingPathId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x12\x1f\n" +
	"\vsync_reason\x18\x05 \x01(\tR\n" +
	"syncReason\"\x9e\x02\n" +
	"\x12OffsetSyncResponse\x12$\n" +
	"\x0ekwik_stream_id\x18\x01 \x01(\x04R\fkwikStreamId\x12'\n" +
	"\x0fexpected_offset\x18\x02 \x01(\x04R\x0eexpectedOffset\x12#\n" +
	"\rsync_required\x18\x03 \x01(\bR\fsyncRequired\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x12B\n" +
	"\x0epending_ranges\x18\x05 \x03(\v2\x1b.kwik.secondary.OffsetRangeR\rpendingRanges\x122\n" +
	"\x15authoritative_path_id\x18\x06 \x01(\tR\x13authoritativePathId\"\x93\x01\n" +
	"\vOffsetRange\x12!\n" +
	"\fstart_offset\x18\x01 \x01(\x04R\vstartOffset\x12\x1d\n" +
	"\n" +
	"end_offset\x18\x02 \x01(\x04R\tendOffset\x12$\n" +
	"\x0esource_path_id\x18\x03 \x01(\tR\fsourcePathId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\"\xb8\x03\n" +
	"\x14SecondaryStreamError\x12.\n" +
	"\x13secondary_stream_id\x18\x01 \x01(\x04R\x11secondaryStreamId\x12$\n" +
	"\x0ekwik_stream_id\x18\x02 \x01(\x04R\fkwikStreamId\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x04R\ttimestamp\x12$\n" +
	"\x0esource_path_id\x18\x06 \x01(\tR\fsourcePathId\x129\n" +
	"\bseverity\x18\a \x01(\x0e2\x1d.kwik.secondary.ErrorSeverityR\bseverity\x12K\n" +
	"\acontext\x18\b \x03(\v21.kwik.secondary.SecondaryStreamError.ContextEntryR\acontext\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9a\x04\n" +
	"\x14SecondaryStreamStats\x12\x17\n" +
	"\apath_id\x18\x01 \x01(\tR\x06pathId\x12%\n" +
	"\x0eactive_streams\x18\x02 \x01(\x04R\ractiveStreams\x122\n" +
	"\x15total_streams_created\x18\x03 \x01(\x04R\x13totalStreamsCreated\x120\n" +
	"\x14total_streams_closed\x18\x04 \x01(\x04R\x12totalStreamsClosed\x12(\n" +
	"\x10total_bytes_sent\x18\x05 \x01(\x04R\x0etotalBytesSent\x120\n" +
	"\x14total_bytes_received\x18\x06 \x01(\x04R\x12totalBytesReceived\x12-\n" +
	"\x12aggregation_events\x18\a \x01(\x04R\x11aggregationEvents\x12)\n" +
	"\x10offset_conflicts\x18\b \x01(\x04R\x0foffsetConflicts\x12#\n" +
	"\rsync_requests\x18\t \x01(\x04R\fsyncRequests\x12%\n" +
	"\x0esync_responses\x18\n" +
	" \x01(\x04R\rsyncResponses\x125\n" +
	"\x16aggregation_efficiency\x18\v \x01(\x02R\x15aggregationEfficiency\x12#\n" +
	"\rlast_activity\x18\f \x01(\x04R\flastActivity*w\n" +
	"\rErrorSeverity\x12\x11\n" +
	"\rSEVERITY_INFO\x10\x00\x12\x14\n" +
	"\x10SEVERITY_WARNING\x10\x01\x12\x12\n" +
	"\x0eSEVERITY_ERROR\x10\x02\x12\x15\n" +
	"\x11SEVERITY_CRITICAL\x10\x03\x12\x12\n" +
	"\x0eSEVERITY_FATAL\x10\x04B\x1dZ\x1bkwik/proto/secondary_streamb\x06proto3"

var (
	file_proto_secondary_stream_secondary_stream_proto_rawDescOnce sync.Once
	file_proto_secondary_stream_secondary_stream_proto_rawDescData []byte
)

func file_proto_secondary_stream_secondary_stream_proto_rawDescGZIP() []byte {
	file_proto_secondary_stream_secondary_stream_proto_rawDescOnce.Do(func() {
		file_proto_secondary_stream_secondary_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_secondary_stream_secondary_stream_proto_rawDesc), len(file_proto_secondary_stream_secondary_stream_proto_rawDesc)))
	})
	return file_proto_secondary_stream_secondary_stream_proto_rawDescData
}

var file_proto_secondary_stream_secondary_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_secondary_stream_secondary_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_secondary_stream_secondary_stream_proto_goTypes = []any{
	(ErrorSeverity)(0),           // 0: kwik.secondary.ErrorSeverity
	(*SecondaryStreamOpen)(nil),  // 1: kwik.secondary.SecondaryStreamOpen
	(*SecondaryStreamData)(nil),  // 2: kwik.secondary.SecondaryStreamData
	(*SecondaryStreamClose)(nil), // 3: kwik.secondary.SecondaryStreamClose
	(*OffsetSyncRequest)(nil),    // 4: kwik.secondary.OffsetSyncRequest
	(*OffsetSyncResponse)(nil),   // 5: kwik.secondary.OffsetSyncResponse
	(*OffsetRange)(nil),          // 6: kwik.secondary.OffsetRange
	(*SecondaryStreamError)(nil), // 7: kwik.secondary.SecondaryStreamError
	(*SecondaryStreamStats)(nil), // 8: kwik.secondary.SecondaryStreamStats
	nil,                          // 9: kwik.secondary.SecondaryStreamOpen.MetadataEntry
	nil,                          // 10: kwik.secondary.SecondaryStreamError.ContextEntry
}
var file_proto_secondary_stream_secondary_stream_proto_depIdxs = []int32{
	9,  // 0: kwik.secondary.SecondaryStreamOpen.metadata:type_name -> kwik.secondary.SecondaryStreamOpen.MetadataEntry
	6,  // 1: kwik.secondary.OffsetSyncResponse.pending_ranges:type_name -> kwik.secondary.OffsetRange
	0,  // 2: kwik.secondary.SecondaryStreamError.severity:type_name -> kwik.secondary.ErrorSeverity
	10, // 3: kwik.secondary.SecondaryStreamError.context:type_name -> kwik.secondary.SecondaryStreamError.ContextEntry
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_secondary_stream_secondary_stream_proto_init() }
func file_proto_secondary_stream_secondary_stream_proto_init() {
	if File_proto_secondary_stream_secondary_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_secondary_stream_secondary_stream_proto_rawDesc), len(file_proto_secondary_stream_secondary_stream_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_secondary_stream_secondary_stream_proto_goTypes,
		DependencyIndexes: file_proto_secondary_stream_secondary_stream_proto_depIdxs,
		EnumInfos:         file_proto_secondary_stream_secondary_stream_proto_enumTypes,
		MessageInfos:      file_proto_secondary_stream_secondary_stream_proto_msgTypes,
	}.Build()
	File_proto_secondary_stream_secondary_stream_proto = out.File
	file_proto_secondary_stream_secondary_stream_proto_goTypes = nil
	file_proto_secondary_stream_secondary_stream_proto_depIdxs = nil
}
